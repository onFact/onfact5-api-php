{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "onFact REST API",
    "description" : "This is an example of using OAuth2 Password Flow in a specification to describe security to your API.",
    "version" : "v1-oas3"
  },
  "servers" : [ {
    "url" : "https://api5.onfact.be/"
  } ],
  "security" : [ {
    "password" : [ "all" ]
  } ],
  "paths" : {
    "/v1/apps" : {
      "get" : {
        "tags" : [ "Apps" ],
        "summary" : "Get a list of all available apps for a company in onFact",
        "description" : "Apps are either modules, integrations of configurations that can be activated or deactivated for both companies as users to extend the functionality of the software or to limit access to certain modules or integrations. If an app is of type \"configuration\" all users have access to this function no matter if this is activated or not.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of apps",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/app-companies" : {
      "get" : {
        "tags" : [ "Apps" ],
        "summary" : "get the list of activated apps of a company",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of apps",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Apps" ],
        "summary" : "activate an app for the company",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AppCompany"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Apps" ],
        "summary" : "deactivate an app for the company",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/app-users" : {
      "get" : {
        "tags" : [ "Apps" ],
        "summary" : "get the list of activated apps of a user",
        "description" : "Get the list of apps accessible to the user. Apps of the type \"configuration\" are accessible by all users and activating of deactivating these apps are ignored. A user with the \"company\" role has access to all apps of the company and activating of deactivating apps for these users is ignored.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of apps",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Apps" ],
        "summary" : "activate an app for the user",
        "description" : "To activate an app for a user, also provide the user id. This is not needed to activate an app for the company since the X-COMPANY-UUID header is used for this.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AppUser"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Apps" ],
        "summary" : "deactivate an app for the company",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "user_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/oauth2/token" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "description" : "Authenticate a user and get access token. If the parameter \"2fa_requered\" is set, use the /oauth2/two-factor-authentication endpoint to activate the access_token before using it on other endpoints. Endpoint is throttled to 5 failed requests per minute.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginAttempt"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The Access Token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "400" : {
            "description" : "UnsupportedGrantType: authentication can only be done with specific grant types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "InvalidLogin: login credentials not correct",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyAttemptsErrorResponse: only 3 failed login attempts per minute are allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "public" : [ ]
        } ]
      }
    },
    "/v1/oauth2/two-factor-authentication" : {
      "put" : {
        "tags" : [ "Authentication" ],
        "description" : "send the Two Factor Authentication code to the server to activate the access_token",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TwoFactorAuthentication"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/responses/InvalidTwoFactorAuthenticationCodeErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "get prospects, customers and suppliers",
        "description" : "get a list of contacts, can be filtered to only get for example prospects, customers or suppliers.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of contacts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Add new prospect, customer or supplier",
        "description" : "Add a new contact. Can be a prospect, customer or supplier based on the given parameter values.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Contact"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Contacts" ],
        "summary" : "get next contact number",
        "description" : "get the number for the next contact",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The numbering sequence to use, either prospects/customers or suppliers",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "customers", "suppliers" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of contacts",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/{id}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "View a specific contact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Contact"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update contact information",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Contact"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete contact",
        "description" : "Deleting a contact puts it in a trash bin state. It will no longer show up in lists, but is still linked to existing documents and can still be found using the specific id endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contact-people" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "get contact persons assiciated with contacts",
        "description" : "each contact can be associated with many contact persons. These are individuals or even departments at the contact company. Contact person data can overwrite the general contact data when creating a document or sending an email.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of contacts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactPeopleList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Add contact person",
        "description" : "Add a new contact person for a prospect, customer or supplier",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactPerson"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contact-people/{id}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "View a specific contact person",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactPerson"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update contact person information",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactPerson"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete contact person",
        "description" : "Deleting a contact person puts it in a trash bin state. It will no longer show up in lists, but is still linked to existing documents and can still be found using the specific id endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contact-tiers" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "get contact tiers",
        "description" : "contacts can be categorized in tiers to set specific product prices for these tiers",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of contact tiers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactTiersList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Add new contact tier",
        "description" : "Add a new contact tier",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactTier"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contact-tiers/{id}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "View a specific contact tier",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactTier"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update a specific contact tier",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactTier"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete  a specific contact tier",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vat-lookups" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Validate a vat number with the VIES registry",
        "description" : "Checks a vat number with the VIES registry. Keep in mind that this service is sometimes unavailable.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Vat"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Valid Vat",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VatContact"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/product-groups" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "get product groups",
        "description" : "get a list of all product groups",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of product groups",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductGroupsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Products" ],
        "summary" : "Add new product group",
        "description" : "Add a new product group",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductGroup"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/product-groups/{id}" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "View a specific product group",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Products" ],
        "summary" : "Update product group",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Products" ],
        "summary" : "Delete product group",
        "description" : "Deleting a product group puts it in a trash bin state. It will no longer show up in lists, but is still linked to existing documents and can still be found using the specific id endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "get a list of all products",
        "description" : "get a list of products, can be filtered for example by name or productgroup",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of products",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Products" ],
        "summary" : "Add product",
        "description" : "Add a new product. All products need to be in a productgroup.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Products" ],
        "summary" : "get next product number",
        "description" : "get the number for the next product",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{id}" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "View product",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Products" ],
        "summary" : "Update product",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Products" ],
        "summary" : "Delete product",
        "description" : "Deleting a product puts it in a trash bin state. It will no longer show up in lists, but is still linked to existing documents and can still be found using the specific id endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/proposals" : {
      "get" : {
        "tags" : [ "Proposals" ],
        "summary" : "get a list of all proposals",
        "description" : "get a list of proposals, can be filtered and sorted",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of proposals",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Proposals" ],
        "summary" : "Add proposal",
        "description" : "Add a new proposal",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Proposal"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Proposals" ],
        "summary" : "Get the next number for a specific journal and a given date",
        "description" : "get the number for the next document",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date determines the bookyear of the numbering sequence. Each bookyear, the numbering resets to start from 1.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "journal_id",
          "in" : "query",
          "description" : "The id of the journal. If no ID is provided, the default journal will be used.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/proposals/{id}" : {
      "get" : {
        "tags" : [ "Proposals" ],
        "summary" : "View proposal",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Proposal"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Proposals" ],
        "summary" : "Update proposal",
        "description" : "If lines parameter is present, all existing lines will be removed and updated by the new one. So when you edit a line, repost all lines.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Proposal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Proposals" ],
        "summary" : "Delete proposal",
        "description" : "Deleting a document puts it in a trash bin state. It will no longer show up in lists, charts and reports, but it can still be found on this specific endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/orderslips" : {
      "get" : {
        "tags" : [ "Orderslips" ],
        "summary" : "get a list of all orderslips",
        "description" : "get a list of orderslips, can be filtered and sorted",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of orderslips",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderslipsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Orderslips" ],
        "summary" : "Add orderslip",
        "description" : "Add a new orderslip",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Orderslip"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Orderslips" ],
        "summary" : "Get the next number for a specific journal and a given date",
        "description" : "get the number for the next document",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date determines the bookyear of the numbering sequence. Each bookyear, the numbering resets to start from 1.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "journal_id",
          "in" : "query",
          "description" : "The id of the journal. If no ID is provided, the default journal will be used.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/orderslips/{id}" : {
      "get" : {
        "tags" : [ "Orderslips" ],
        "summary" : "View orderslip",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Orderslip"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Orderslips" ],
        "summary" : "Update orderslip",
        "description" : "If lines parameter is present, all existing lines will be removed and updated by the new one. So when you edit a line, repost all lines.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Orderslip"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Orderslips" ],
        "summary" : "Delete orderslip",
        "description" : "Deleting a document puts it in a trash bin state. It will no longer show up in lists, charts and reports, but it can still be found on this specific endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deliveryslips" : {
      "get" : {
        "tags" : [ "Deliveryslips" ],
        "summary" : "get a list of all deliveryslips",
        "description" : "get a list of deliveryslips, can be filtered and sorted",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of deliveryslips",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryslipsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Deliveryslips" ],
        "summary" : "Add deliveryslip",
        "description" : "Add a new deliveryslip",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Deliveryslip"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Deliveryslips" ],
        "summary" : "Get the next number for a specific journal and a given date",
        "description" : "get the number for the next document",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date determines the bookyear of the numbering sequence. Each bookyear, the numbering resets to start from 1.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "journal_id",
          "in" : "query",
          "description" : "The id of the journal. If no ID is provided, the default journal will be used.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deliveryslips/{id}" : {
      "get" : {
        "tags" : [ "Deliveryslips" ],
        "summary" : "View deliveryslip",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Deliveryslip"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Deliveryslips" ],
        "summary" : "Update deliveryslip",
        "description" : "If lines parameter is present, all existing lines will be removed and updated by the new one. So when you edit a line, repost all lines.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Deliveryslip"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Deliveryslips" ],
        "summary" : "Delete deliveryslip",
        "description" : "Deleting a document puts it in a trash bin state. It will no longer show up in lists, charts and reports, but it can still be found on this specific endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/postickets" : {
      "get" : {
        "tags" : [ "Postickets" ],
        "summary" : "get a list of all postickets",
        "description" : "get a list of postickets, can be filtered and sorted",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of postickets",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PosticketsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Postickets" ],
        "summary" : "Add posticket",
        "description" : "Add a new posticket",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Posticket"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Postickets" ],
        "summary" : "Get the next number for a specific journal and a given date",
        "description" : "get the number for the next document",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date determines the bookyear of the numbering sequence. Each bookyear, the numbering resets to start from 1.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "journal_id",
          "in" : "query",
          "description" : "The id of the journal. If no ID is provided, the default journal will be used.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/postickets/{id}" : {
      "get" : {
        "tags" : [ "Postickets" ],
        "summary" : "View posticket",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Posticket"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Postickets" ],
        "summary" : "Update posticket",
        "description" : "If lines parameter is present, all existing lines will be removed and updated by the new one. So when you edit a line, repost all lines.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Posticket"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Postickets" ],
        "summary" : "Delete posticket",
        "description" : "Deleting a document puts it in a trash bin state. It will no longer show up in lists, charts and reports, but it can still be found on this specific endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/postickets/{id}/payments" : {
      "post" : {
        "tags" : [ "Postickets" ],
        "summary" : "Add new payment connected to document",
        "description" : "Add new payment connected to document",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Payment"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/paymentrequests" : {
      "get" : {
        "tags" : [ "Paymentrequests" ],
        "summary" : "get a list of all paymentrequests",
        "description" : "get a list of paymentrequests, can be filtered and sorted",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of paymentrequests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentrequestsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Paymentrequests" ],
        "summary" : "Add paymentrequest",
        "description" : "Add a new paymentrequest",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Paymentrequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Paymentrequests" ],
        "summary" : "Get the next number for a specific journal and a given date",
        "description" : "get the number for the next document",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date determines the bookyear of the numbering sequence. Each bookyear, the numbering resets to start from 1.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "journal_id",
          "in" : "query",
          "description" : "The id of the journal. If no ID is provided, the default journal will be used.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/paymentrequests/{id}" : {
      "get" : {
        "tags" : [ "Paymentrequests" ],
        "summary" : "View paymentrequest",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Paymentrequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Paymentrequests" ],
        "summary" : "Update paymentrequest",
        "description" : "If lines parameter is present, all existing lines will be removed and updated by the new one. So when you edit a line, repost all lines.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Paymentrequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Paymentrequests" ],
        "summary" : "Delete paymentrequest",
        "description" : "Deleting a document puts it in a trash bin state. It will no longer show up in lists, charts and reports, but it can still be found on this specific endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/paymentrequests/{id}/payments" : {
      "post" : {
        "tags" : [ "Paymentrequests" ],
        "summary" : "Add new payment connected to document",
        "description" : "Add new payment connected to document",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Payment"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/invoices" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "get a list of all invoices",
        "description" : "get a list of invoices, can be filtered and sorted",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of invoices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicesList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Add invoice",
        "description" : "Add a new invoice",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Invoice"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Invoices" ],
        "summary" : "Get the next number for a specific journal and a given date",
        "description" : "get the number for the next product",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date determines the bookyear of the numbering sequence. Each bookyear, the numbering resets to start from 1.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "journal_id",
          "in" : "query",
          "description" : "The id of the journal. If no ID is provided, the default journal will be used.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/invoices/{id}" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "View invoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Invoices" ],
        "summary" : "Update invoice",
        "description" : "If lines parameter is present, all existing lines will be removed and updated by the new one. So when you edit a line, repost all lines.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Invoice"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Invoices" ],
        "summary" : "Delete invoice",
        "description" : "Deleting a document puts it in a trash bin state. It will no longer show up in lists, charts and reports, but it can still be found on this specific endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/invoices/{id}/payments" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Add new payment connected to document",
        "description" : "Add new payment connected to document",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Payment"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/invoices/{id}/emails" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Send document with email",
        "description" : "Send document with email. Status of invoice will be updated automatically",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Email"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/invoices/{id}/letters" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Send document with letter post.",
        "description" : "Send document with letter post. Will be biled and sutracted from the account wallet!",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Letter"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/exact-online/v1/invoices/{id}" : {
      "put" : {
        "tags" : [ "Invoices" ],
        "summary" : "Send document to ExactOnline.",
        "description" : "Send document to ExactOnline. Connection needs to be configured in the account.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bulk/invoices" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Add bulk invoices",
        "description" : "Create a bulk assignment to create new invoices. Invoices will be created async in a waiting line. The webhook is called when adding is complete.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkInvoices"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/creditnotes" : {
      "get" : {
        "tags" : [ "Creditnotes" ],
        "summary" : "get a list of all creditnotes",
        "description" : "get a list of creditnotes, can be filtered and sorted",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of creditnotes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditnotesList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Creditnotes" ],
        "summary" : "Add creditnote",
        "description" : "Add a new creditnote",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Creditnote"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Creditnotes" ],
        "summary" : "Get the next number for a specific journal and a given date",
        "description" : "get the number for the next document",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date determines the bookyear of the numbering sequence. Each bookyear, the numbering resets to start from 1.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "journal_id",
          "in" : "query",
          "description" : "The id of the journal. If no ID is provided, the default journal will be used.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/creditnotes/{id}" : {
      "get" : {
        "tags" : [ "Creditnotes" ],
        "summary" : "View creditnote",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Creditnote"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Creditnotes" ],
        "summary" : "Update creditnote",
        "description" : "If lines parameter is present, all existing lines will be removed and updated by the new one. So when you edit a line, repost all lines.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Creditnote"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Creditnotes" ],
        "summary" : "Delete creditnote",
        "description" : "Deleting a document puts it in a trash bin state. It will no longer show up in lists, charts and reports, but it can still be found on this specific endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/creditnotes/{id}/payments" : {
      "post" : {
        "tags" : [ "Creditnotes" ],
        "summary" : "Add new payment connected to document",
        "description" : "Add new payment connected to document",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Payment"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/purchaseslips" : {
      "get" : {
        "tags" : [ "Purchaseslips" ],
        "summary" : "get a list of all purchaseslips",
        "description" : "get a list of purchaseslips, can be filtered and sorted",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of purchaseslips",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurchaseslipsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Purchaseslips" ],
        "summary" : "Add purchaseslip",
        "description" : "Add a new purchaseslip",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Purchaseslip"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Purchaseslips" ],
        "summary" : "Get the next number for a specific journal and a given date",
        "description" : "get the number for the next document",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date determines the bookyear of the numbering sequence. Each bookyear, the numbering resets to start from 1.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "journal_id",
          "in" : "query",
          "description" : "The id of the journal. If no ID is provided, the default journal will be used.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-NEXT-NUMBER" : {
                "description" : "the next number",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer"
                }
              },
              "X-NEXT-NUMBER-FORMATTED" : {
                "description" : "the next number formatted with the company number-formats",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/purchaseslips/{id}" : {
      "get" : {
        "tags" : [ "Purchaseslips" ],
        "summary" : "View purchaseslip",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Purchaseslip"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Purchaseslips" ],
        "summary" : "Update purchaseslip",
        "description" : "If lines parameter is present, all existing lines will be removed and updated by the new one. So when you edit a line, repost all lines.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Purchaseslip"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Purchaseslips" ],
        "summary" : "Delete purchaseslip",
        "description" : "Deleting a document puts it in a trash bin state. It will no longer show up in lists, charts and reports, but it can still be found on this specific endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/purchaseslips/{id}/payments" : {
      "post" : {
        "tags" : [ "Purchaseslips" ],
        "summary" : "Add new payment connected to document",
        "description" : "Add new payment connected to document",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Payment"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment-accounts" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "get payment accounts",
        "description" : "get a list of all payment accounts (cash, bank, ...)",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of payment accounts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentAccountsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Add new payment account",
        "description" : "Add a new payment account",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentAccount"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment-accounts/{id}" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "View a specific payment account",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentAccount"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Payments" ],
        "summary" : "Update payment account",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentAccount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payments" ],
        "summary" : "Delete payment account",
        "description" : "Deleting a payment account puts it in a trash bin state. It will no longer show up in lists, but is still linked to existing documents and can still be found using the specific id endpoint.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "get a list of payments",
        "description" : "get a list of all payments from all accounts",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of payments",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Add new payment",
        "description" : "Add a new payment",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Payment"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "View payment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payment"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Payments" ],
        "summary" : "Update payment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Payment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payments" ],
        "summary" : "Delete payment",
        "description" : "Delete payment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/financial-documents" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Add financial document",
        "description" : "Add / Import financial document. Documents are processed and inserted as payments.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FinancialDocument"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/export-requests" : {
      "get" : {
        "tags" : [ "Export" ],
        "summary" : "Get list of export requests",
        "description" : "get a list of all export requests with a status per request",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of export requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRequestsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Export" ],
        "summary" : "Add export request",
        "description" : "Add a new export request. The system will prepare an attachment with the requested data.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExportRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/export-requests/{id}" : {
      "get" : {
        "tags" : [ "Export" ],
        "summary" : "View export request",
        "description" : "Check if the export request has finished and download the attachment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Export" ],
        "summary" : "Delete import request",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/import-configurations" : {
      "get" : {
        "tags" : [ "Import" ],
        "summary" : "get a list of all import configurations",
        "description" : "get a list of import configurations, can be filtered and sorted",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of import configurations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportConfigurationsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Import" ],
        "summary" : "Add import configuration",
        "description" : "Add a new import configuration",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportConfiguration"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Import" ],
        "summary" : "Get the allowed fields to import",
        "description" : "get the number for the next document",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number in the header",
            "headers" : {
              "X-CONTACT-FIELDS" : {
                "description" : "a comma seperated list of all fields that can be imported",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              },
              "X-PRODUCT-FIELDS" : {
                "description" : "a comma seperated list of all fields that can be imported",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/import-configurations/{id}" : {
      "get" : {
        "tags" : [ "Import" ],
        "summary" : "View import configuration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportConfiguration"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Import" ],
        "summary" : "Update import configuration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportConfiguration"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Import" ],
        "summary" : "Delete import configuration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/import-requests" : {
      "get" : {
        "tags" : [ "Import" ],
        "summary" : "Get list of import requests",
        "description" : "get a list of all import requests with a status per request",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of import requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportRequestsList"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Import" ],
        "summary" : "Add import request",
        "description" : "Add a new import request",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/import-requests/{id}" : {
      "get" : {
        "tags" : [ "Import" ],
        "summary" : "View import request",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Import" ],
        "summary" : "Delete import request",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contact-fields" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "get custom fields",
        "description" : "get a list created custom contact fields. These fields can be used to save extra information in the contact profile.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of custom contact fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactFieldsList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Add new custom contact field",
        "description" : "Add a new custom field for saving custom data with your contacts",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactField"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contact-fields/{id}" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "View a specific custom contact field",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactField"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Update a specific custom contact field",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactField"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Delete  a specific custom contact field",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/templates" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Get all templates",
        "description" : "Get all templates. Both activated and available templates. Best use filters to seperate them.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of templates",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplatesList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Add new template",
        "description" : "Add a new template. Use 'original_template_id' to activate a template or use 'creator_id' to create a new one.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Template"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/templates/{id}" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "View a specific template",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Template"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Update a specific template",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Template"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Delete  a specific template",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/lawrules" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "list lawrules",
        "description" : "A company can setup several pieces of text which can be added or removed from a document with a single click. These pieces of text are called \\\"lawrules\\\" because they mostly contain some kind of mandatory text that needs to be on the Invoice. The lawrules are only used for custom pieces of text, when a vat_exception is used for an invoice, it is possible the system will automatically add a generic lawrule.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LawrulesList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Add new lawrule",
        "description" : "A company can setup several pieces of text which can be added or removed from a document with a single click. These pieces of text are called \\\"lawrules\\\" because they mostly contain some kind of mandatory text that needs to be on the Invoice. The lawrules are only used for custom pieces of text, when a vat_exception is used for an invoice, it is possible the system will automatically add a generic lawrule. When updating the 'rank' value, all resources of same language and model that equal or are higher than the 'rank' value will be incremented by 1. So there is no need to update other resources.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Lawrule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/lawrules/{id}" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "View a specific lawrule",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Lawrule"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Update lawrule",
        "description" : "When updating the 'rank' value, all resources of same language that equal or are higher than the 'rank' value will be incremented by 1. So there is no need to update other resources.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Lawrule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Delete lawrule",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/descriptions" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "list standard document descriptions",
        "description" : "Each document has an area of text at the bottom of the invoice. This endpoint manages standard descriptions that can be used by the user to easily insert a custom text in a document.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DescriptionsList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Add new standard document description",
        "description" : "Each document has an area of text at the bottom of the invoice. This endpoint manages standard descriptions that can be used by the user to easily insert a custom text in a document. When updating the 'rank' value, all resources of same language and model that equal or are higher than the 'rank' value will be incremented by 1. So there is no need to update other resources.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Description"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/descriptions/{id}" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "View a specific description",
        "description" : "When updating the 'rank' value, all resources of same language and model that equal or are higher than the 'rank' value will be incremented by 1. So there is no need to update other resources.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Description"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Update document description",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Description"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Delete document description",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound: The specified resourse wat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/toptextdescriptions" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "list standard document descriptions (top)",
        "description" : "Each document has an area of text at the top of the invoice. This endpoint manages standard descriptions that can be used by the user to easily insert a custom text in a document.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ToptextdescriptionsList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Add new standard document description",
        "description" : "Each document has an area of text at the top of the invoice. This endpoint manages standard descriptions that can be used by the user to easily insert a custom text in a document. When updating the 'rank' value, all resources of same language and model that equal or are higher than the 'rank' value will be incremented by 1. So there is no need to update other resources.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Toptextdescription"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/toptextdescriptions/{id}" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "View a specific description",
        "description" : "When updating the 'rank' value, all resources of same language and model that equal or are higher than the 'rank' value will be incremented by 1. So there is no need to update other resources.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Toptextdescription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Update document description",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Toptextdescription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Delete document description",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/emaildescriptions" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "list standard emails",
        "description" : "Documents can be sent easily with onFact. The emaildescriptions contain the standard email texts when sending a document over email. This makes sure the user doesn't have to type the same text again and again for every email.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of standard emails",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmaildescriptionsList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Add new standard email",
        "description" : "When updating the 'rank' value, all resources of same language and model that equal or are higher than the 'rank' value will be incremented by 1. So there is no need to update other resources.",
        "parameters" : [ {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Emaildescription"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/emaildescriptions/{id}" : {
      "get" : {
        "tags" : [ "Company Settings" ],
        "summary" : "View a specific standard email text",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Emaildescription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Update standard email",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Emaildescription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Resource Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "description" : "ValidationError: Resource could not be saved because of validation errors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Company Settings" ],
        "summary" : "Delete document description",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The resource ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "X-COMPANY-UUID",
          "in" : "header",
          "description" : "The UUID of the company for which this endpoint is used",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource Deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized: Authentication is needed for this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "TooManyRequests: The API throttling limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Success" : {
        "required" : [ "code-" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the resource."
          },
          "code" : {
            "type" : "string",
            "description" : "Success code of the action"
          }
        }
      },
      "Error" : {
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The response code identifier"
          },
          "message" : {
            "type" : "string",
            "description" : "Status message"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Error_errors"
            }
          }
        }
      },
      "LoginAttempt" : {
        "required" : [ "password", "username" ],
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "the user email address"
          },
          "password" : {
            "type" : "string",
            "description" : "the user password"
          }
        }
      },
      "AccessToken" : {
        "type" : "object",
        "properties" : {
          "token_type" : {
            "type" : "string",
            "description" : "The token type",
            "enum" : [ "Bearer" ]
          },
          "expires_in" : {
            "type" : "integer",
            "description" : "The ttl of the access token in seconds"
          },
          "access_token" : {
            "type" : "string",
            "description" : "token string of 255 characters."
          },
          "refresh_token" : {
            "type" : "string",
            "description" : "token string of 255 characters."
          },
          "2fa_required" : {
            "type" : "boolean",
            "description" : "If activating the token with 2FA is required before it can be used."
          }
        }
      },
      "TwoFactorAuthentication" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "a generated code of a 2FA app"
          }
        }
      },
      "Country" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The country ID (3 characters)."
          },
          "iso2" : {
            "type" : "string",
            "description" : "The country ID (2 characters)."
          },
          "name" : {
            "$ref" : "#/components/schemas/Country_name"
          }
        }
      },
      "Language" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The language ID (3 characters)."
          },
          "active" : {
            "type" : "string",
            "description" : "If the language is used in the company."
          },
          "name" : {
            "$ref" : "#/components/schemas/Language_name"
          }
        }
      },
      "Currency" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The currency ID (3 characters)."
          },
          "name" : {
            "$ref" : "#/components/schemas/Currency_name"
          }
        }
      },
      "UnitCode" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The currency ID (3 characters)."
          },
          "name" : {
            "type" : "string",
            "description" : "name in English"
          },
          "symbol" : {
            "type" : "string",
            "description" : "symbol to depict the unit code. Is placed before or after the quantity."
          }
        }
      },
      "App" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The app ID."
          },
          "controller" : {
            "type" : "string",
            "description" : "The app identifier"
          },
          "category" : {
            "type" : "string",
            "enum" : [ "app", "integration", "configuration" ]
          },
          "name_nld" : {
            "type" : "string",
            "description" : "The app name in dutch"
          },
          "description_nld" : {
            "type" : "string",
            "description" : "The app description in dutch"
          },
          "description_fre" : {
            "type" : "string",
            "description" : "The app description in french"
          },
          "name_fre" : {
            "type" : "string",
            "description" : "The app name in french"
          },
          "name_eng" : {
            "type" : "string",
            "description" : "The app name in english"
          },
          "description_eng" : {
            "type" : "string",
            "description" : "The app description in english"
          },
          "name_ger" : {
            "type" : "string",
            "description" : "The app name in german"
          },
          "description_ger" : {
            "type" : "string",
            "description" : "The app description in german"
          }
        }
      },
      "AppsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/App"
            }
          }
        }
      },
      "AppCompany" : {
        "properties" : {
          "app_id" : {
            "type" : "integer",
            "description" : "id of the app to add to the company"
          }
        }
      },
      "AppUser" : {
        "properties" : {
          "app_id" : {
            "type" : "integer",
            "description" : "id of the app to add to the user account"
          },
          "user_id" : {
            "type" : "integer",
            "description" : "id of the user that needs to get access to the app"
          }
        }
      },
      "Attachment" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The atachment id"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the orignal file"
          },
          "extension" : {
            "type" : "string",
            "description" : "The extension of the orignal file"
          },
          "url" : {
            "type" : "string",
            "description" : "The url where to download the file. Use single use tokens to append to this url as query parameters to authenticate and download."
          }
        }
      },
      "Company" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the company.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "a chosen name for the description so the user can easily select a description"
          },
          "street" : {
            "type" : "string"
          },
          "streetnumber" : {
            "type" : "string"
          },
          "citycode" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "vat" : {
            "type" : "string",
            "description" : "The vat number of the contact. Please incluse the country code!"
          },
          "country_id" : {
            "type" : "string"
          },
          "language_id" : {
            "type" : "string"
          },
          "currency_id" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "gsm" : {
            "type" : "string"
          },
          "fax" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string",
            "description" : "multiple email addresses can be seperated by a comma."
          },
          "website" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "description" : "The datetime the contact was created",
            "format" : "datetime"
          },
          "modified" : {
            "type" : "string",
            "description" : "The datetime the contact was last modified",
            "format" : "datetime"
          }
        }
      },
      "Contact" : {
        "required" : [ "name", "number" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the contact.",
            "readOnly" : true
          },
          "country_id" : {
            "type" : "string",
            "description" : "the id of the country of the contact."
          },
          "language_id" : {
            "type" : "string",
            "description" : "the id of the language of the contact."
          },
          "currency_id" : {
            "type" : "string",
            "description" : "the id of the currency of the contact."
          },
          "number" : {
            "type" : "integer",
            "description" : "a numeric number assigned to the contact. No sting! A structure such as C00123 is defined with the number-formats endpoint. The format will be applied on the number when loading the contact."
          },
          "number_formatted" : {
            "type" : "integer",
            "description" : "The generated formatted number based on the raw number and the number format setting.",
            "readOnly" : true
          },
          "prospect" : {
            "type" : "string",
            "description" : "If the contact is or was a prospect, the date and time it was assigned as propsect.",
            "format" : "datetime"
          },
          "customer" : {
            "type" : "string",
            "description" : "If the contact is or was a prospect, the date and time it was assigned as propsect.",
            "format" : "datetime"
          },
          "supplier" : {
            "type" : "string",
            "description" : "If the contact is or was a prospect, the date and time it was assigned as propsect.",
            "format" : "datetime"
          },
          "name" : {
            "type" : "string",
            "description" : "a chosen name for the description so the user can easily select a description"
          },
          "street" : {
            "type" : "string"
          },
          "streetnumber" : {
            "type" : "string"
          },
          "citycode" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "latitude" : {
            "type" : "number",
            "readOnly" : true
          },
          "longitude" : {
            "type" : "number",
            "readOnly" : true
          },
          "vat" : {
            "type" : "string",
            "description" : "The vat number of the contact. Please incluse the country code!"
          },
          "phone" : {
            "type" : "string"
          },
          "gsm" : {
            "type" : "string"
          },
          "fax" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string",
            "description" : "multiple email addresses can be seperated by a comma."
          },
          "website" : {
            "type" : "string"
          },
          "vat_exception" : {
            "type" : "string",
            "description" : "vat exception following the Belgian law and vat declaration. 03 will be automatically converted to 00, 01 and 02 if a row has a different tax percent.Will be applied in the UI when selecting the contact for a document.",
            "enum" : [ "00", "03", "44", "45", "46", "47" ]
          },
          "term_invoices" : {
            "type" : "integer",
            "description" : "if set, the standard term of the company will be overruled with a custom payment term for invoices. Will be applied in the UI when selecting the contact for a document."
          },
          "term_inovices" : {
            "type" : "boolean",
            "description" : "if set, the expiration date of an invoice will be set to the end of month. If an invoice has a date 15th of January and 30 days payment term. The expiration date is 15th of February. Enabling this setting will make the expiration date 28th of February. if the term_invoices is null, this seting has no effect since the company standard will be used. Will be applied in the UI when selecting the contact for a document."
          },
          "discount" : {
            "type" : "number",
            "description" : "The standard discount amount a contact gets. This field works in combination with 'discount_type' field. Will be applied in the UI when selecting the contact for a document. Leave null or 0 for no discount."
          },
          "discount_type" : {
            "type" : "string",
            "description" : "sets if the discount is either a fixed amount or a percentage. Will be applied in the UI when selecting the contact for a document.",
            "enum" : [ "amount", "percent" ]
          },
          "settlement_discount" : {
            "type" : "number",
            "description" : "The settlement discount percentage ('Korting voor contante betaling') in Belgian law. This contact specific setting will be loaded when selecting the contact while creating a document."
          },
          "settlement_term" : {
            "type" : "integer",
            "description" : "The number of days the settlement discount is applicable. After this period, the full amount needs to be paid."
          },
          "standard_vat" : {
            "type" : "number",
            "description" : "Only for suppliers: the standard vat that needs to be set when uploading purchase invoices for this contact"
          },
          "standard_purchase_category_id" : {
            "type" : "integer",
            "description" : "Only for suppliers: the standard purchase cateogry that needs to be set when uploading purchase invoices for this contact"
          },
          "eid" : {
            "type" : "string",
            "description" : "An external ID that can be set by the user. This field is not visible in the UI but can be used in the API to match to an external ID. This field is also used by the import function to update a contact rather than creating a new one."
          },
          "channel" : {
            "type" : "string",
            "description" : "Used for prospecting: the channel from which you gained a new prospect. For example your website, facebook campaign, social marketing, ... This value is used in reports to give feedback about the performance of different marketing channels"
          },
          "twikey_state" : {
            "type" : "string",
            "description" : "When using the Twikey app, this field will inform you about the state of the mandate. If it is ready to be used or still needs to be signed"
          },
          "twikey_collectable" : {
            "type" : "string",
            "description" : "If this status is true, the mandate can be used to collect"
          },
          "twikey_startup_url" : {
            "type" : "string",
            "description" : "The URL to the Twikey online environment where the contact can sign a mandate."
          },
          "contact_field_x" : {
            "type" : "string",
            "description" : "The value for the contact field with id x (replace the x with an id). The parameter is also visible when viewing the fields with the contact-fields endpoint."
          },
          "created" : {
            "type" : "string",
            "description" : "The datetime the contact was created",
            "format" : "datetime"
          },
          "modified" : {
            "type" : "string",
            "description" : "The datetime the contact was last modified",
            "format" : "datetime"
          }
        }
      },
      "ContactsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Contact"
            }
          }
        }
      },
      "ContactPerson" : {
        "required" : [ "contact_id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the contact person.",
            "readOnly" : true
          },
          "contact_id" : {
            "type" : "integer",
            "description" : "The id of the contact to associate this contact person to."
          },
          "country_id" : {
            "type" : "string",
            "description" : "the id of the country of the contact person."
          },
          "language_id" : {
            "type" : "string",
            "description" : "the id of the language of the contact person."
          },
          "name" : {
            "type" : "string",
            "description" : "a chosen name for the description so the user can easily select a description"
          },
          "street" : {
            "type" : "string"
          },
          "streetnumber" : {
            "type" : "string"
          },
          "citycode" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "gsm" : {
            "type" : "string"
          },
          "fax" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string",
            "description" : "multiple email addresses can be seperated by a comma."
          },
          "website" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "description" : "The datetime the contact was created",
            "format" : "datetime"
          },
          "modified" : {
            "type" : "string",
            "description" : "The datetime the contact was last modified",
            "format" : "datetime"
          }
        }
      },
      "ContactPeopleList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactPerson"
            }
          }
        }
      },
      "ContactTier" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the field.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "a description for the tier"
          }
        }
      },
      "ContactTiersList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactTier"
            }
          }
        }
      },
      "FinancialDocument" : {
        "required" : [ "file", "filename", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of the file. PDF files are not processed to payments. Zip files can also be used, but select the type of the files within the zip archive.",
            "enum" : [ "coda", "mt940", "pdf" ]
          },
          "filename" : {
            "type" : "string",
            "description" : "The filename for the uploaded file"
          },
          "file" : {
            "type" : "string",
            "description" : "File contents in base64 format"
          }
        }
      },
      "Payment" : {
        "required" : [ "amount", "date", "payment_account_id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the field.",
            "readOnly" : true
          },
          "payment_account_id" : {
            "type" : "string",
            "description" : "The ID of the payment account"
          },
          "date" : {
            "type" : "string",
            "description" : "The date of the transaction"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Payment_amount"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "The currency"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the other party if available"
          },
          "iban" : {
            "type" : "string",
            "description" : "If a bank transfer, the IBAN of the other party"
          }
        }
      },
      "PaymentsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductGroup"
            }
          }
        }
      },
      "PaymentAccount" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the field.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "a description for the tier"
          },
          "iban" : {
            "type" : "string",
            "description" : "If a bank account, the IBAN of the bank account"
          },
          "bic" : {
            "type" : "string",
            "description" : "If a bank account, the BIC of the bank account"
          },
          "g_l_account_code" : {
            "type" : "string",
            "description" : "The 6 digit GLAccount code (for example: 500000)"
          },
          "journal_code" : {
            "type" : "string",
            "description" : "A financial journal code, used for the connection with some bookkeeping applications"
          },
          "current_balance" : {
            "type" : "string",
            "description" : "The current balance on the account"
          }
        }
      },
      "PaymentAccountsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductGroup"
            }
          }
        }
      },
      "ProductGroup" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the field.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "a description for the tier"
          },
          "g_l_account_code" : {
            "type" : "string",
            "description" : "The 6 digit GLAccount code (for example: 700000)"
          },
          "profit_margin" : {
            "type" : "integer",
            "description" : "The standard profit margin for newly created products in this group, in percent. A profit margin of 100% will multiply the purchase price by 2 to set the standard sales price."
          },
          "deleted" : {
            "type" : "boolean",
            "description" : "If the productgroup was deleted"
          }
        }
      },
      "ProductGroupsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductGroup"
            }
          }
        }
      },
      "Product" : {
        "required" : [ "name", "productgroup_id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the product.",
            "readOnly" : true
          },
          "unit_code_id" : {
            "type" : "string",
            "description" : "The id of the unit code",
            "default" : "ZZ"
          },
          "productgroup_id" : {
            "type" : "integer",
            "description" : "the id of the productgroup to which this product belongs"
          },
          "number" : {
            "type" : "string",
            "description" : "The product number or code"
          },
          "number_formatted" : {
            "type" : "string",
            "description" : "The product number or code, formatted with number format in settings"
          },
          "name" : {
            "$ref" : "#/components/schemas/Product_name"
          },
          "text" : {
            "$ref" : "#/components/schemas/Product_text"
          },
          "vattype" : {
            "type" : "string",
            "enum" : [ "excl", "incl" ]
          },
          "price" : {
            "$ref" : "#/components/schemas/Product_price"
          },
          "price_excl" : {
            "$ref" : "#/components/schemas/Product_price_excl"
          },
          "tax_amount" : {
            "$ref" : "#/components/schemas/Product_tax_amount"
          },
          "price_incl" : {
            "$ref" : "#/components/schemas/Product_price_incl"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "The currency id in which the price is set",
            "default" : "company currency"
          },
          "vat" : {
            "type" : "number",
            "description" : "the default vat percentage. Can be overwritten when an exception is used on document level"
          },
          "purchase_price" : {
            "type" : "number",
            "description" : "The purchase price of the product. In the product currency"
          },
          "empty_goods_value" : {
            "type" : "number",
            "description" : "The value of the empty goods of the product, for example packaging. This is added to the product price to calculate the total amount a customer needs to pay."
          },
          "product_lines" : {
            "type" : "array",
            "description" : "If a product is composed of other products, for example a box of wine contains six bottles of wine X, then this can be set here. This way, you can track how many bottles you have sold and the stock is updated correctly",
            "items" : {
              "$ref" : "#/components/schemas/Product_product_lines"
            }
          },
          "track_stock" : {
            "type" : "string",
            "description" : "The date and time from when to track the stock",
            "format" : "datetime"
          },
          "stock_warning" : {
            "type" : "number",
            "description" : "The warning level of the stock. If the stock drops lower than this level, a warning is displayed on the dashboard"
          },
          "virtual_stock" : {
            "type" : "number",
            "description" : "The actual stock minus the open orders in the orderslips",
            "readOnly" : true
          },
          "actual_stock" : {
            "type" : "number",
            "description" : "The actual stock, calculated since \\'track stock\\' based on documents. Either deliveryslips or invoices. This depends on the company settings.",
            "readOnly" : true
          },
          "g_l_account_code" : {
            "type" : "string",
            "description" : "The 6 digit GLAccount code (for example: 700000)"
          },
          "ean" : {
            "type" : "string",
            "description" : "A unique EAN code. Can be used with a barcode scanner in the application."
          },
          "eid" : {
            "type" : "string",
            "description" : "External id. Can be used to enter the ID of the supplier to prevent creating a product twice. Is also used by the import function."
          },
          "nota" : {
            "type" : "string",
            "description" : "A free textfield to enter internal information about the product"
          },
          "deleted" : {
            "type" : "boolean",
            "description" : "If the productgroup was deleted"
          }
        }
      },
      "ProductsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          }
        }
      },
      "ProposalLine" : {
        "required" : [ "name", "price", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the line.",
            "readOnly" : true
          },
          "unit_code_id" : {
            "type" : "string",
            "description" : "the ID of the unit code (UNECERec21)",
            "default" : "ZZ"
          },
          "type" : {
            "type" : "string",
            "description" : "line behavior",
            "default" : "line",
            "enum" : [ "line", "cost", "section" ]
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quanity of the product or services"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the product or service. First line on the document"
          },
          "text" : {
            "type" : "string",
            "description" : "Optional extra text under the name. Can be formatted in HTML."
          },
          "price" : {
            "type" : "number",
            "description" : "price in the document currency"
          },
          "purchase_price" : {
            "type" : "number",
            "description" : "purchase price of the line in the document currency (cost). Line price - Line purchase price = Line profit"
          },
          "empty_goods_value" : {
            "type" : "number",
            "description" : "The total price of empty goods in the document currency. The empty goods value is added to the price."
          },
          "vat" : {
            "type" : "number",
            "description" : "The vat percentage. If the document vattype is excl, the vat will be added to the price. If the document vattype is incl, the price already has the vat included and nothing will be added."
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount on this line. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "product_id" : {
            "type" : "integer",
            "description" : "Optional product ID. When a line is linked to a specific product, a product history and statistics become available for that product. Lines don't need to be linked to products in the system."
          },
          "g_l_account_code" : {
            "type" : "integer",
            "description" : "The GLAccount code (for example 700000) on which accounting number the sale has to be booked. This can be used when exporting the invoice to accounting software."
          },
          "unit_code" : {
            "$ref" : "#/components/schemas/UnitCode"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "base_price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_excl"
          },
          "base_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_tax_amount"
          },
          "base_price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_incl"
          },
          "discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_excl"
          },
          "tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_discount"
          },
          "discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_incl"
          },
          "price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_excl"
          },
          "tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_amount"
          },
          "price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_incl"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_incl"
          },
          "cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_cost_amount"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_cost_amount"
          },
          "profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_profit_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_profit_amount"
          }
        }
      },
      "ProposalLines" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ProposalLine"
        }
      },
      "Proposal" : {
        "required" : [ "customer_name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the product.",
            "readOnly" : true
          },
          "journal_id" : {
            "type" : "integer",
            "description" : "The id of the sales journal. \\'null\\' for default journal"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "currency id for the document currency",
            "default" : "company currency"
          },
          "number" : {
            "type" : "integer",
            "description" : "raw number (without format) for the document"
          },
          "number_formatted" : {
            "type" : "string",
            "description" : "formatted number",
            "readOnly" : true
          },
          "date" : {
            "type" : "string",
            "description" : "document date",
            "format" : "date"
          },
          "status" : {
            "type" : "string",
            "description" : "The document status. Can't be modified here, use the DocumentEvent endpoint to create and delete events that update the status",
            "readOnly" : true
          },
          "template_id" : {
            "type" : "integer",
            "description" : "The id of the template that needs to be used to create the PDF file"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "The id of the customer to which the document belongs. No customer data is copied from the contact to the document, this needs to be set manually. If the contact info changes, old documents don\\'t get updated."
          },
          "customer_name" : {
            "type" : "string",
            "description" : "The \\'contact_id\\' field is only used to link the document to the contact, but the customer data needs to be set per document, so if the contact info changes, old documents don\\'t get updated."
          },
          "customer_attn" : {
            "type" : "string",
            "description" : "The attn line of the document"
          },
          "customer_street" : {
            "type" : "string",
            "description" : "The street name of the customer"
          },
          "customer_streetnumber" : {
            "type" : "string",
            "description" : "The street number and PO box for the customer"
          },
          "customer_citycode" : {
            "type" : "string",
            "description" : "The postal code or zip code for the customer"
          },
          "customer_city" : {
            "type" : "string",
            "description" : "The city of the customer"
          },
          "customer_vat" : {
            "type" : "string",
            "description" : "The VAT number of the customer"
          },
          "customer_email" : {
            "type" : "string",
            "description" : "A specific customer email for this document. If this is set, when sending the document over email, this email address is proposed instead of the email address of the linked contact."
          },
          "country_id" : {
            "type" : "string",
            "description" : "The country id for the customer"
          },
          "language_id" : {
            "type" : "string",
            "description" : "The language id for the customer. This determines the languange in which the PDF file is generated."
          },
          "signature_customer" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by the customer"
          },
          "signature_company" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by company owner (the onFact user)."
          },
          "signature" : {
            "type" : "string",
            "description" : "base64 encoded image with the signature"
          },
          "vattype" : {
            "type" : "string",
            "description" : "If line prices are entered excluding taxes or including taxes. The method of calculation and rounding is different for each method. If you want a specific endtotal of the invoice including taxes, best to enter prices incl.",
            "enum" : [ "excl", "incl" ]
          },
          "vat_exception" : {
            "type" : "string",
            "description" : "Belgian VAT declaration box. Boxes 01 and 02 don't need to be set here, just use 03 and the system wil automatically change the 03 to 01 for lines with 6% vat and 02 for lines with 12% vat. Used for specific mandatory pieces of text on the invoice and when invoices are pushed to accounting systems.",
            "enum" : [ "00", "03", "44", "45", "46", "47" ]
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "exchange_rate" : {
            "type" : "number",
            "description" : "The exchange rate used to convert the document currency to the company currency"
          },
          "term" : {
            "type" : "integer",
            "description" : "Number of days before the document expires"
          },
          "expiration_date" : {
            "type" : "string",
            "description" : "The calculated expiration date, adding the term to the document date and possibly taking the last day of that month.",
            "format" : "date",
            "readOnly" : true
          },
          "section_behavior" : {
            "type" : "string",
            "description" : "How sections should behave. Are they just a grouping section in which each line has it's own price, or has the total section a specific price and line prices are ignored.",
            "enum" : [ "sum", "price" ]
          },
          "text" : {
            "type" : "string",
            "description" : "The text field under the lines table. Can be formatted with HTML.",
            "format" : "html"
          },
          "toptext" : {
            "type" : "string",
            "description" : "The text field above the lines table. Can be formatted with HTML. Is a configuration that needs to be activated to be visible in the online application.",
            "format" : "html"
          },
          "nota" : {
            "type" : "string",
            "description" : "A free textfield to enter internal information about the product"
          },
          "uuid" : {
            "type" : "string",
            "description" : "unique code for this invoice. This can be used to let the customer view the invoice without a login.",
            "readOnly" : true
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "modified" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "deleted" : {
            "type" : "boolean"
          },
          "proposal_lines" : {
            "$ref" : "#/components/schemas/ProposalLines"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_incl"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_cost_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_profit_amount"
          },
          "total_empty_goods_value" : {
            "$ref" : "#/components/schemas/Proposal_total_empty_goods_value"
          }
        }
      },
      "ProposalsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Proposal"
            }
          }
        }
      },
      "OrderslipLine" : {
        "required" : [ "name", "price", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the line.",
            "readOnly" : true
          },
          "unit_code_id" : {
            "type" : "string",
            "description" : "the ID of the unit code (UNECERec21)",
            "default" : "ZZ"
          },
          "type" : {
            "type" : "string",
            "description" : "line behavior",
            "default" : "line",
            "enum" : [ "line", "cost", "section" ]
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quanity of the product or services"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the product or service. First line on the document"
          },
          "text" : {
            "type" : "string",
            "description" : "Optional extra text under the name. Can be formatted in HTML."
          },
          "price" : {
            "type" : "number",
            "description" : "price in the document currency"
          },
          "purchase_price" : {
            "type" : "number",
            "description" : "purchase price of the line in the document currency (cost). Line price - Line purchase price = Line profit"
          },
          "empty_goods_value" : {
            "type" : "number",
            "description" : "The total price of empty goods in the document currency. The empty goods value is added to the price."
          },
          "vat" : {
            "type" : "number",
            "description" : "The vat percentage. If the document vattype is excl, the vat will be added to the price. If the document vattype is incl, the price already has the vat included and nothing will be added."
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount on this line. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "product_id" : {
            "type" : "integer",
            "description" : "Optional product ID. When a line is linked to a specific product, a product history and statistics become available for that product. Lines don't need to be linked to products in the system."
          },
          "g_l_account_code" : {
            "type" : "integer",
            "description" : "The GLAccount code (for example 700000) on which accounting number the sale has to be booked. This can be used when exporting the invoice to accounting software."
          },
          "unit_code" : {
            "$ref" : "#/components/schemas/UnitCode"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "base_price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_excl"
          },
          "base_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_tax_amount"
          },
          "base_price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_incl"
          },
          "discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_excl"
          },
          "tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_discount"
          },
          "discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_incl"
          },
          "price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_excl"
          },
          "tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_amount"
          },
          "price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_incl"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_incl"
          },
          "cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_cost_amount"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_cost_amount"
          },
          "profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_profit_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_profit_amount"
          }
        }
      },
      "OrderslipLines" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/OrderslipLine"
        }
      },
      "Orderslip" : {
        "required" : [ "customer_name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the product.",
            "readOnly" : true
          },
          "journal_id" : {
            "type" : "integer",
            "description" : "The id of the sales journal. \\'null\\' for default journal"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "currency id for the document currency",
            "default" : "company currency"
          },
          "number" : {
            "type" : "integer",
            "description" : "raw number (without format) for the document"
          },
          "number_formatted" : {
            "type" : "string",
            "description" : "formatted number",
            "readOnly" : true
          },
          "date" : {
            "type" : "string",
            "description" : "document date",
            "format" : "date"
          },
          "status" : {
            "type" : "string",
            "description" : "The document status. Can't be modified here, use the DocumentEvent endpoint to create and delete events that update the status",
            "readOnly" : true
          },
          "template_id" : {
            "type" : "integer",
            "description" : "The id of the template that needs to be used to create the PDF file"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "The id of the customer to which the document belongs. No customer data is copied from the contact to the document, this needs to be set manually. If the contact info changes, old documents don\\'t get updated."
          },
          "customer_name" : {
            "type" : "string",
            "description" : "The \\'contact_id\\' field is only used to link the document to the contact, but the customer data needs to be set per document, so if the contact info changes, old documents don\\'t get updated."
          },
          "customer_attn" : {
            "type" : "string",
            "description" : "The attn line of the document"
          },
          "customer_street" : {
            "type" : "string",
            "description" : "The street name of the customer"
          },
          "customer_streetnumber" : {
            "type" : "string",
            "description" : "The street number and PO box for the customer"
          },
          "customer_citycode" : {
            "type" : "string",
            "description" : "The postal code or zip code for the customer"
          },
          "customer_city" : {
            "type" : "string",
            "description" : "The city of the customer"
          },
          "customer_vat" : {
            "type" : "string",
            "description" : "The VAT number of the customer"
          },
          "customer_email" : {
            "type" : "string",
            "description" : "A specific customer email for this document. If this is set, when sending the document over email, this email address is proposed instead of the email address of the linked contact."
          },
          "country_id" : {
            "type" : "string",
            "description" : "The country id for the customer"
          },
          "language_id" : {
            "type" : "string",
            "description" : "The language id for the customer. This determines the languange in which the PDF file is generated."
          },
          "signature_customer" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by the customer"
          },
          "signature_company" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by company owner (the onFact user)."
          },
          "signature" : {
            "type" : "string",
            "description" : "base64 encoded image with the signature"
          },
          "vattype" : {
            "type" : "string",
            "description" : "If line prices are entered excluding taxes or including taxes. The method of calculation and rounding is different for each method. If you want a specific endtotal of the invoice including taxes, best to enter prices incl.",
            "enum" : [ "excl", "incl" ]
          },
          "vat_exception" : {
            "type" : "string",
            "description" : "Belgian VAT declaration box. Boxes 01 and 02 don't need to be set here, just use 03 and the system wil automatically change the 03 to 01 for lines with 6% vat and 02 for lines with 12% vat. Used for specific mandatory pieces of text on the invoice and when invoices are pushed to accounting systems.",
            "enum" : [ "00", "03", "44", "45", "46", "47" ]
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "exchange_rate" : {
            "type" : "number",
            "description" : "The exchange rate used to convert the document currency to the company currency"
          },
          "section_behavior" : {
            "type" : "string",
            "description" : "How sections should behave. Are they just a grouping section in which each line has it's own price, or has the total section a specific price and line prices are ignored.",
            "enum" : [ "sum", "price" ]
          },
          "text" : {
            "type" : "string",
            "description" : "The text field under the lines table. Can be formatted with HTML.",
            "format" : "html"
          },
          "toptext" : {
            "type" : "string",
            "description" : "The text field above the lines table. Can be formatted with HTML. Is a configuration that needs to be activated to be visible in the online application.",
            "format" : "html"
          },
          "nota" : {
            "type" : "string",
            "description" : "A free textfield to enter internal information about the product"
          },
          "uuid" : {
            "type" : "string",
            "description" : "unique code for this invoice. This can be used to let the customer view the invoice without a login.",
            "readOnly" : true
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "modified" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "deleted" : {
            "type" : "boolean"
          },
          "orderslip_lines" : {
            "$ref" : "#/components/schemas/OrderslipLines"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_incl"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_cost_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_profit_amount"
          },
          "total_empty_goods_value" : {
            "$ref" : "#/components/schemas/Proposal_total_empty_goods_value"
          }
        }
      },
      "OrderslipsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Orderslip"
            }
          }
        }
      },
      "DeliveryslipLine" : {
        "required" : [ "name", "price", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the line.",
            "readOnly" : true
          },
          "unit_code_id" : {
            "type" : "string",
            "description" : "the ID of the unit code (UNECERec21)",
            "default" : "ZZ"
          },
          "type" : {
            "type" : "string",
            "description" : "line behavior",
            "default" : "line",
            "enum" : [ "line", "cost", "section" ]
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quanity of the product or services"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the product or service. First line on the document"
          },
          "text" : {
            "type" : "string",
            "description" : "Optional extra text under the name. Can be formatted in HTML."
          },
          "price" : {
            "type" : "number",
            "description" : "price in the document currency"
          },
          "purchase_price" : {
            "type" : "number",
            "description" : "purchase price of the line in the document currency (cost). Line price - Line purchase price = Line profit"
          },
          "empty_goods_value" : {
            "type" : "number",
            "description" : "The total price of empty goods in the document currency. The empty goods value is added to the price."
          },
          "vat" : {
            "type" : "number",
            "description" : "The vat percentage. If the document vattype is excl, the vat will be added to the price. If the document vattype is incl, the price already has the vat included and nothing will be added."
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount on this line. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "product_id" : {
            "type" : "integer",
            "description" : "Optional product ID. When a line is linked to a specific product, a product history and statistics become available for that product. Lines don't need to be linked to products in the system."
          },
          "g_l_account_code" : {
            "type" : "integer",
            "description" : "The GLAccount code (for example 700000) on which accounting number the sale has to be booked. This can be used when exporting the invoice to accounting software."
          },
          "unit_code" : {
            "$ref" : "#/components/schemas/UnitCode"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "base_price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_excl"
          },
          "base_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_tax_amount"
          },
          "base_price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_incl"
          },
          "discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_excl"
          },
          "tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_discount"
          },
          "discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_incl"
          },
          "price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_excl"
          },
          "tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_amount"
          },
          "price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_incl"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_incl"
          },
          "cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_cost_amount"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_cost_amount"
          },
          "profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_profit_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_profit_amount"
          }
        }
      },
      "DeliveryslipLines" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/DeliveryslipLine"
        }
      },
      "Deliveryslip" : {
        "required" : [ "customer_name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the product.",
            "readOnly" : true
          },
          "journal_id" : {
            "type" : "integer",
            "description" : "The id of the sales journal. \\'null\\' for default journal"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "currency id for the document currency",
            "default" : "company currency"
          },
          "number" : {
            "type" : "integer",
            "description" : "raw number (without format) for the document"
          },
          "number_formatted" : {
            "type" : "string",
            "description" : "formatted number",
            "readOnly" : true
          },
          "date" : {
            "type" : "string",
            "description" : "document date",
            "format" : "date"
          },
          "status" : {
            "type" : "string",
            "description" : "The document status. Can't be modified here, use the DocumentEvent endpoint to create and delete events that update the status",
            "readOnly" : true
          },
          "template_id" : {
            "type" : "integer",
            "description" : "The id of the template that needs to be used to create the PDF file"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "The id of the customer to which the document belongs. No customer data is copied from the contact to the document, this needs to be set manually. If the contact info changes, old documents don\\'t get updated."
          },
          "customer_name" : {
            "type" : "string",
            "description" : "The \\'contact_id\\' field is only used to link the document to the contact, but the customer data needs to be set per document, so if the contact info changes, old documents don\\'t get updated."
          },
          "customer_attn" : {
            "type" : "string",
            "description" : "The attn line of the document"
          },
          "customer_street" : {
            "type" : "string",
            "description" : "The street name of the customer"
          },
          "customer_streetnumber" : {
            "type" : "string",
            "description" : "The street number and PO box for the customer"
          },
          "customer_citycode" : {
            "type" : "string",
            "description" : "The postal code or zip code for the customer"
          },
          "customer_city" : {
            "type" : "string",
            "description" : "The city of the customer"
          },
          "customer_vat" : {
            "type" : "string",
            "description" : "The VAT number of the customer"
          },
          "customer_email" : {
            "type" : "string",
            "description" : "A specific customer email for this document. If this is set, when sending the document over email, this email address is proposed instead of the email address of the linked contact."
          },
          "country_id" : {
            "type" : "string",
            "description" : "The country id for the customer"
          },
          "language_id" : {
            "type" : "string",
            "description" : "The language id for the customer. This determines the languange in which the PDF file is generated."
          },
          "signature_customer" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by the customer"
          },
          "signature_company" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by company owner (the onFact user)."
          },
          "signature" : {
            "type" : "string",
            "description" : "base64 encoded image with the signature"
          },
          "vattype" : {
            "type" : "string",
            "description" : "If line prices are entered excluding taxes or including taxes. The method of calculation and rounding is different for each method. If you want a specific endtotal of the invoice including taxes, best to enter prices incl.",
            "enum" : [ "excl", "incl" ]
          },
          "vat_exception" : {
            "type" : "string",
            "description" : "Belgian VAT declaration box. Boxes 01 and 02 don't need to be set here, just use 03 and the system wil automatically change the 03 to 01 for lines with 6% vat and 02 for lines with 12% vat. Used for specific mandatory pieces of text on the invoice and when invoices are pushed to accounting systems.",
            "enum" : [ "00", "03", "44", "45", "46", "47" ]
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "exchange_rate" : {
            "type" : "number",
            "description" : "The exchange rate used to convert the document currency to the company currency"
          },
          "section_behavior" : {
            "type" : "string",
            "description" : "How sections should behave. Are they just a grouping section in which each line has it's own price, or has the total section a specific price and line prices are ignored.",
            "enum" : [ "sum", "price" ]
          },
          "text" : {
            "type" : "string",
            "description" : "The text field under the lines table. Can be formatted with HTML.",
            "format" : "html"
          },
          "toptext" : {
            "type" : "string",
            "description" : "The text field above the lines table. Can be formatted with HTML. Is a configuration that needs to be activated to be visible in the online application.",
            "format" : "html"
          },
          "nota" : {
            "type" : "string",
            "description" : "A free textfield to enter internal information about the product"
          },
          "uuid" : {
            "type" : "string",
            "description" : "unique code for this invoice. This can be used to let the customer view the invoice without a login.",
            "readOnly" : true
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "modified" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "deleted" : {
            "type" : "boolean"
          },
          "deliveryslip_lines" : {
            "$ref" : "#/components/schemas/DeliveryslipLines"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_incl"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_cost_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_profit_amount"
          },
          "total_empty_goods_value" : {
            "$ref" : "#/components/schemas/Proposal_total_empty_goods_value"
          }
        }
      },
      "DeliveryslipsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Deliveryslip"
            }
          }
        }
      },
      "PosticketLine" : {
        "required" : [ "name", "price", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the line.",
            "readOnly" : true
          },
          "unit_code_id" : {
            "type" : "string",
            "description" : "the ID of the unit code (UNECERec21)",
            "default" : "ZZ"
          },
          "type" : {
            "type" : "string",
            "description" : "line behavior",
            "default" : "line",
            "enum" : [ "line", "cost", "section" ]
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quanity of the product or services"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the product or service. First line on the document"
          },
          "text" : {
            "type" : "string",
            "description" : "Optional extra text under the name. Can be formatted in HTML."
          },
          "price" : {
            "type" : "number",
            "description" : "price in the document currency"
          },
          "purchase_price" : {
            "type" : "number",
            "description" : "purchase price of the line in the document currency (cost). Line price - Line purchase price = Line profit"
          },
          "empty_goods_value" : {
            "type" : "number",
            "description" : "The total price of empty goods in the document currency. The empty goods value is added to the price."
          },
          "vat" : {
            "type" : "number",
            "description" : "The vat percentage. If the document vattype is excl, the vat will be added to the price. If the document vattype is incl, the price already has the vat included and nothing will be added."
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount on this line. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "product_id" : {
            "type" : "integer",
            "description" : "Optional product ID. When a line is linked to a specific product, a product history and statistics become available for that product. Lines don't need to be linked to products in the system."
          },
          "g_l_account_code" : {
            "type" : "integer",
            "description" : "The GLAccount code (for example 700000) on which accounting number the sale has to be booked. This can be used when exporting the invoice to accounting software."
          },
          "unit_code" : {
            "$ref" : "#/components/schemas/UnitCode"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "base_price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_excl"
          },
          "base_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_tax_amount"
          },
          "base_price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_incl"
          },
          "discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_excl"
          },
          "tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_discount"
          },
          "discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_incl"
          },
          "price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_excl"
          },
          "tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_amount"
          },
          "price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_incl"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_incl"
          },
          "cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_cost_amount"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_cost_amount"
          },
          "profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_profit_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_profit_amount"
          }
        }
      },
      "PosticketLines" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PosticketLine"
        }
      },
      "Posticket" : {
        "required" : [ "customer_name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the product.",
            "readOnly" : true
          },
          "journal_id" : {
            "type" : "integer",
            "description" : "The id of the sales journal. \\'null\\' for default journal"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "currency id for the document currency",
            "default" : "company currency"
          },
          "number" : {
            "type" : "integer",
            "description" : "raw number (without format) for the document"
          },
          "number_formatted" : {
            "type" : "string",
            "description" : "formatted number",
            "readOnly" : true
          },
          "date" : {
            "type" : "string",
            "description" : "document date",
            "format" : "date"
          },
          "status" : {
            "type" : "string",
            "description" : "The document status. Can't be modified here, use the DocumentEvent endpoint to create and delete events that update the status",
            "readOnly" : true
          },
          "template_id" : {
            "type" : "integer",
            "description" : "The id of the template that needs to be used to create the PDF file"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "The id of the customer to which the document belongs. No customer data is copied from the contact to the document, this needs to be set manually. If the contact info changes, old documents don\\'t get updated."
          },
          "customer_name" : {
            "type" : "string",
            "description" : "The \\'contact_id\\' field is only used to link the document to the contact, but the customer data needs to be set per document, so if the contact info changes, old documents don\\'t get updated."
          },
          "customer_attn" : {
            "type" : "string",
            "description" : "The attn line of the document"
          },
          "customer_street" : {
            "type" : "string",
            "description" : "The street name of the customer"
          },
          "customer_streetnumber" : {
            "type" : "string",
            "description" : "The street number and PO box for the customer"
          },
          "customer_citycode" : {
            "type" : "string",
            "description" : "The postal code or zip code for the customer"
          },
          "customer_city" : {
            "type" : "string",
            "description" : "The city of the customer"
          },
          "customer_vat" : {
            "type" : "string",
            "description" : "The VAT number of the customer"
          },
          "customer_email" : {
            "type" : "string",
            "description" : "A specific customer email for this document. If this is set, when sending the document over email, this email address is proposed instead of the email address of the linked contact."
          },
          "country_id" : {
            "type" : "string",
            "description" : "The country id for the customer"
          },
          "language_id" : {
            "type" : "string",
            "description" : "The language id for the customer. This determines the languange in which the PDF file is generated."
          },
          "signature_customer" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by the customer"
          },
          "signature_company" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by company owner (the onFact user)."
          },
          "signature" : {
            "type" : "string",
            "description" : "base64 encoded image with the signature"
          },
          "vattype" : {
            "type" : "string",
            "description" : "If line prices are entered excluding taxes or including taxes. The method of calculation and rounding is different for each method. If you want a specific endtotal of the invoice including taxes, best to enter prices incl.",
            "enum" : [ "excl", "incl" ]
          },
          "vat_exception" : {
            "type" : "string",
            "description" : "Belgian VAT declaration box. Boxes 01 and 02 don't need to be set here, just use 03 and the system wil automatically change the 03 to 01 for lines with 6% vat and 02 for lines with 12% vat. Used for specific mandatory pieces of text on the invoice and when invoices are pushed to accounting systems.",
            "enum" : [ "00", "03", "44", "45", "46", "47" ]
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "exchange_rate" : {
            "type" : "number",
            "description" : "The exchange rate used to convert the document currency to the company currency"
          },
          "section_behavior" : {
            "type" : "string",
            "description" : "How sections should behave. Are they just a grouping section in which each line has it's own price, or has the total section a specific price and line prices are ignored.",
            "enum" : [ "sum", "price" ]
          },
          "text" : {
            "type" : "string",
            "description" : "The text field under the lines table. Can be formatted with HTML.",
            "format" : "html"
          },
          "toptext" : {
            "type" : "string",
            "description" : "The text field above the lines table. Can be formatted with HTML. Is a configuration that needs to be activated to be visible in the online application.",
            "format" : "html"
          },
          "nota" : {
            "type" : "string",
            "description" : "A free textfield to enter internal information about the product"
          },
          "uuid" : {
            "type" : "string",
            "description" : "unique code for this invoice. This can be used to let the customer view the invoice without a login.",
            "readOnly" : true
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "modified" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "deleted" : {
            "type" : "boolean"
          },
          "posticket_lines" : {
            "$ref" : "#/components/schemas/PosticketLines"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_incl"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_cost_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_profit_amount"
          },
          "total_empty_goods_value" : {
            "$ref" : "#/components/schemas/Proposal_total_empty_goods_value"
          }
        }
      },
      "PosticketsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Posticket"
            }
          }
        }
      },
      "PaymentrequestLine" : {
        "required" : [ "name", "price", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the line.",
            "readOnly" : true
          },
          "unit_code_id" : {
            "type" : "string",
            "description" : "the ID of the unit code (UNECERec21)",
            "default" : "ZZ"
          },
          "type" : {
            "type" : "string",
            "description" : "line behavior",
            "default" : "line",
            "enum" : [ "line", "cost", "section" ]
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quanity of the product or services"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the product or service. First line on the document"
          },
          "text" : {
            "type" : "string",
            "description" : "Optional extra text under the name. Can be formatted in HTML."
          },
          "price" : {
            "type" : "number",
            "description" : "price in the document currency"
          },
          "purchase_price" : {
            "type" : "number",
            "description" : "purchase price of the line in the document currency (cost). Line price - Line purchase price = Line profit"
          },
          "empty_goods_value" : {
            "type" : "number",
            "description" : "The total price of empty goods in the document currency. The empty goods value is added to the price."
          },
          "vat" : {
            "type" : "number",
            "description" : "The vat percentage. If the document vattype is excl, the vat will be added to the price. If the document vattype is incl, the price already has the vat included and nothing will be added."
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount on this line. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "product_id" : {
            "type" : "integer",
            "description" : "Optional product ID. When a line is linked to a specific product, a product history and statistics become available for that product. Lines don't need to be linked to products in the system."
          },
          "g_l_account_code" : {
            "type" : "integer",
            "description" : "The GLAccount code (for example 700000) on which accounting number the sale has to be booked. This can be used when exporting the invoice to accounting software."
          },
          "unit_code" : {
            "$ref" : "#/components/schemas/UnitCode"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "base_price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_excl"
          },
          "base_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_tax_amount"
          },
          "base_price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_incl"
          },
          "discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_excl"
          },
          "tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_discount"
          },
          "discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_incl"
          },
          "price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_excl"
          },
          "tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_amount"
          },
          "price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_incl"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_incl"
          },
          "cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_cost_amount"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_cost_amount"
          },
          "profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_profit_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_profit_amount"
          }
        }
      },
      "PaymentrequestLines" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PaymentrequestLine"
        }
      },
      "Paymentrequest" : {
        "required" : [ "customer_name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the product.",
            "readOnly" : true
          },
          "journal_id" : {
            "type" : "integer",
            "description" : "The id of the sales journal. \\'null\\' for default journal"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "currency id for the document currency",
            "default" : "company currency"
          },
          "number" : {
            "type" : "integer",
            "description" : "raw number (without format) for the document"
          },
          "number_formatted" : {
            "type" : "string",
            "description" : "formatted number",
            "readOnly" : true
          },
          "date" : {
            "type" : "string",
            "description" : "document date",
            "format" : "date"
          },
          "status" : {
            "type" : "string",
            "description" : "The document status. Can't be modified here, use the DocumentEvent endpoint to create and delete events that update the status",
            "readOnly" : true
          },
          "template_id" : {
            "type" : "integer",
            "description" : "The id of the template that needs to be used to create the PDF file"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "The id of the customer to which the document belongs. No customer data is copied from the contact to the document, this needs to be set manually. If the contact info changes, old documents don\\'t get updated."
          },
          "customer_name" : {
            "type" : "string",
            "description" : "The \\'contact_id\\' field is only used to link the document to the contact, but the customer data needs to be set per document, so if the contact info changes, old documents don\\'t get updated."
          },
          "customer_attn" : {
            "type" : "string",
            "description" : "The attn line of the document"
          },
          "customer_street" : {
            "type" : "string",
            "description" : "The street name of the customer"
          },
          "customer_streetnumber" : {
            "type" : "string",
            "description" : "The street number and PO box for the customer"
          },
          "customer_citycode" : {
            "type" : "string",
            "description" : "The postal code or zip code for the customer"
          },
          "customer_city" : {
            "type" : "string",
            "description" : "The city of the customer"
          },
          "customer_vat" : {
            "type" : "string",
            "description" : "The VAT number of the customer"
          },
          "customer_email" : {
            "type" : "string",
            "description" : "A specific customer email for this document. If this is set, when sending the document over email, this email address is proposed instead of the email address of the linked contact."
          },
          "country_id" : {
            "type" : "string",
            "description" : "The country id for the customer"
          },
          "language_id" : {
            "type" : "string",
            "description" : "The language id for the customer. This determines the languange in which the PDF file is generated."
          },
          "signature_customer" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by the customer"
          },
          "signature_company" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by company owner (the onFact user)."
          },
          "signature" : {
            "type" : "string",
            "description" : "base64 encoded image with the signature"
          },
          "vattype" : {
            "type" : "string",
            "description" : "If line prices are entered excluding taxes or including taxes. The method of calculation and rounding is different for each method. If you want a specific endtotal of the invoice including taxes, best to enter prices incl.",
            "enum" : [ "excl", "incl" ]
          },
          "vat_exception" : {
            "type" : "string",
            "description" : "Belgian VAT declaration box. Boxes 01 and 02 don't need to be set here, just use 03 and the system wil automatically change the 03 to 01 for lines with 6% vat and 02 for lines with 12% vat. Used for specific mandatory pieces of text on the invoice and when invoices are pushed to accounting systems.",
            "enum" : [ "00", "03", "44", "45", "46", "47" ]
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "exchange_rate" : {
            "type" : "number",
            "description" : "The exchange rate used to convert the document currency to the company currency"
          },
          "section_behavior" : {
            "type" : "string",
            "description" : "How sections should behave. Are they just a grouping section in which each line has it's own price, or has the total section a specific price and line prices are ignored.",
            "enum" : [ "sum", "price" ]
          },
          "text" : {
            "type" : "string",
            "description" : "The text field under the lines table. Can be formatted with HTML.",
            "format" : "html"
          },
          "toptext" : {
            "type" : "string",
            "description" : "The text field above the lines table. Can be formatted with HTML. Is a configuration that needs to be activated to be visible in the online application.",
            "format" : "html"
          },
          "nota" : {
            "type" : "string",
            "description" : "A free textfield to enter internal information about the product"
          },
          "uuid" : {
            "type" : "string",
            "description" : "unique code for this invoice. This can be used to let the customer view the invoice without a login.",
            "readOnly" : true
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "modified" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "deleted" : {
            "type" : "boolean"
          },
          "paymentrequest_lines" : {
            "$ref" : "#/components/schemas/PaymentrequestLines"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_incl"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_cost_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_profit_amount"
          },
          "total_empty_goods_value" : {
            "$ref" : "#/components/schemas/Proposal_total_empty_goods_value"
          }
        }
      },
      "PaymentrequestsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Paymentrequest"
            }
          }
        }
      },
      "InvoiceLine" : {
        "required" : [ "name", "price", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the line.",
            "readOnly" : true
          },
          "unit_code_id" : {
            "type" : "string",
            "description" : "the ID of the unit code (UNECERec21)",
            "default" : "ZZ"
          },
          "type" : {
            "type" : "string",
            "description" : "line behavior",
            "default" : "line",
            "enum" : [ "line", "cost", "section" ]
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quanity of the product or services"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the product or service. First line on the document"
          },
          "text" : {
            "type" : "string",
            "description" : "Optional extra text under the name. Can be formatted in HTML."
          },
          "price" : {
            "type" : "number",
            "description" : "price in the document currency"
          },
          "purchase_price" : {
            "type" : "number",
            "description" : "purchase price of the line in the document currency (cost). Line price - Line purchase price = Line profit"
          },
          "empty_goods_value" : {
            "type" : "number",
            "description" : "The total price of empty goods in the document currency. The empty goods value is added to the price."
          },
          "vat" : {
            "type" : "number",
            "description" : "The vat percentage. If the document vattype is excl, the vat will be added to the price. If the document vattype is incl, the price already has the vat included and nothing will be added."
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount on this line. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "product_id" : {
            "type" : "integer",
            "description" : "Optional product ID. When a line is linked to a specific product, a product history and statistics become available for that product. Lines don't need to be linked to products in the system."
          },
          "g_l_account_code" : {
            "type" : "integer",
            "description" : "The GLAccount code (for example 700000) on which accounting number the sale has to be booked. This can be used when exporting the invoice to accounting software."
          },
          "base_price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_excl"
          },
          "base_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_tax_amount"
          },
          "base_price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_incl"
          },
          "discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_excl"
          },
          "tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_discount"
          },
          "discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_incl"
          },
          "price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_excl"
          },
          "tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_amount"
          },
          "price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_incl"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_incl"
          },
          "cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_cost_amount"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_cost_amount"
          },
          "profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_profit_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_profit_amount"
          }
        }
      },
      "InvoiceLines" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/InvoiceLine"
        }
      },
      "Invoice" : {
        "required" : [ "customer_name", "invoice_lines" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the product.",
            "readOnly" : true
          },
          "journal_id" : {
            "type" : "integer",
            "description" : "The id of the journal. \\'null\\' for default journal"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "currency id for the document currency",
            "default" : "company currency"
          },
          "number" : {
            "type" : "integer",
            "description" : "raw number (without format) for the document"
          },
          "number_formatted" : {
            "type" : "string",
            "description" : "formatted number",
            "readOnly" : true
          },
          "date" : {
            "type" : "string",
            "description" : "document date",
            "format" : "date"
          },
          "delivery_date" : {
            "type" : "string",
            "description" : "global delivery date for the document. This is a custom field and needs to be manually added to the template to be visible",
            "format" : "date"
          },
          "order_reference" : {
            "type" : "string",
            "description" : "An order reference for the document. This is a custom field and needs to be manually added to the template to be visible",
            "format" : "date"
          },
          "status" : {
            "type" : "string",
            "description" : "The document status. Can't be modified here, use the DocumentEvent endpoint to create and delete events that update the status",
            "readOnly" : true
          },
          "template_id" : {
            "type" : "integer",
            "description" : "The id of the template that needs to be used to create the PDF file"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "The id of the customer to which the document belongs. No customer data is copied from the contact to the document, this needs to be set manually. If the contact info changes, old documents don\\'t get updated."
          },
          "customer_name" : {
            "type" : "string",
            "description" : "The \\'contact_id\\' field is only used to link the document to the contact, but the customer data needs to be set per document, so if the contact info changes, old documents don\\'t get updated."
          },
          "customer_attn" : {
            "type" : "string",
            "description" : "The attn line of the document"
          },
          "customer_street" : {
            "type" : "string",
            "description" : "The street name of the customer"
          },
          "customer_streetnumber" : {
            "type" : "string",
            "description" : "The street number and PO box for the customer"
          },
          "customer_citycode" : {
            "type" : "string",
            "description" : "The postal code or zip code for the customer"
          },
          "customer_city" : {
            "type" : "string",
            "description" : "The city of the customer"
          },
          "customer_vat" : {
            "type" : "string",
            "description" : "The VAT number of the customer"
          },
          "customer_email" : {
            "type" : "string",
            "description" : "A specific customer email for this document. If this is set, when sending the document over email, this email address is proposed instead of the email address of the linked contact."
          },
          "country_id" : {
            "type" : "string",
            "description" : "The country id for the customer"
          },
          "language_id" : {
            "type" : "string",
            "description" : "The language id for the customer. This determines the languange in which the PDF file is generated."
          },
          "vattype" : {
            "type" : "string",
            "description" : "If line prices are entered excluding taxes or including taxes. The method of calculation and rounding is different for each method. If you want a specific endtotal of the invoice including taxes, best to enter prices incl.",
            "enum" : [ "excl", "incl" ]
          },
          "vat_exception" : {
            "type" : "string",
            "description" : "Belgian VAT declaration box. Boxes 01 and 02 don't need to be set here, just use 03 and the system wil automatically change the 03 to 01 for lines with 6% vat and 02 for lines with 12% vat. Used for specific mandatory pieces of text on the invoice and when invoices are pushed to accounting systems.",
            "enum" : [ "00", "03", "44", "45", "46", "47" ]
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "exchange_rate" : {
            "type" : "number",
            "description" : "The exchange rate used to convert the document currency to the company currency"
          },
          "term" : {
            "type" : "integer",
            "description" : "Number of days before the document expires"
          },
          "term_end_of_month" : {
            "type" : "boolean",
            "description" : "If the term needs to be modified so that the document expires at the last day of that month."
          },
          "expiration_date" : {
            "type" : "string",
            "description" : "The calculated expiration date, adding the term to the document date and possibly taking the last day of that month.",
            "format" : "date",
            "readOnly" : true
          },
          "section_behavior" : {
            "type" : "string",
            "description" : "How sections should behave. Are they just a grouping section in which each line has it's own price, or has the total section a specific price and line prices are ignored.",
            "enum" : [ "sum", "price" ]
          },
          "settlement_discount" : {
            "type" : "number",
            "description" : "Belgian specific setting. A percentual discount when the customer pays within X number of days. This setting determines the discount. When used, this is in most cases 2%."
          },
          "settlement_term" : {
            "type" : "integer",
            "description" : "Belgian specific setting. The number of days the settlement_discount is valid."
          },
          "automatic_reminders" : {
            "type" : "boolean",
            "description" : "If automatic reminders should be sent for this document. Automatic reminders are only sent when a automatic reminder job is set, the invoice is not paid, the document is expired and this setting is set to true.",
            "default" : true
          },
          "text" : {
            "type" : "string",
            "description" : "The text field under the lines table. Can be formatted with HTML.",
            "format" : "html"
          },
          "toptext" : {
            "type" : "string",
            "description" : "The text field above the lines table. Can be formatted with HTML. Is a configuration that needs to be activated to be visible in the online application.",
            "format" : "html"
          },
          "nota" : {
            "type" : "string",
            "description" : "A free textfield to enter internal information about the product"
          },
          "online_payment_link" : {
            "type" : "string",
            "description" : "If an online payment connection is activated, customers can go to this URL to pay the invoice online",
            "readOnly" : true
          },
          "uuid" : {
            "type" : "string",
            "description" : "unique code for this invoice. This can be used to let the customer view the invoice without a login.",
            "readOnly" : true
          },
          "ogm" : {
            "type" : "string",
            "description" : "Belgian customers only. A structured message that can be used for payment of the invoice.",
            "readOnly" : true
          },
          "codabox_uploaded" : {
            "type" : "boolean",
            "description" : "Belgian companies only. If the document is already sent to CodaBox (Accounting). Invoices can only be sent once. Check the CodaBox endpoint how to send the document.",
            "readOnly" : true
          },
          "vat_certificate_uuid" : {
            "type" : "string",
            "description" : "Belgian companies only. The UUID identifier of the VAT certificate created on btw-attest.be .",
            "readOnly" : true
          },
          "vat_certificate_signed" : {
            "type" : "boolean",
            "description" : "If the VAT certificate is signed by the customer",
            "readOnly" : true
          },
          "twikey_transaction_id" : {
            "type" : "string",
            "description" : "If the payment is collected with a mandate using Twikey.com; the ID of the collection will be stored here.",
            "readOnly" : true
          },
          "exact_online_document_number" : {
            "type" : "string",
            "description" : "The number used to book the document in ExactOnline",
            "readOnly" : true
          },
          "yuki_document_id" : {
            "type" : "string",
            "description" : "Belgian & Dutch companies only. The ID of the document in the Yuki system that corresponds to this document.",
            "readOnly" : true
          },
          "basecone_document_id" : {
            "type" : "string",
            "description" : "Belgian & Dutch companies only. The ID of the document in the Basecone system that corresponds to this document.",
            "readOnly" : true
          },
          "clearfacts_document_id" : {
            "type" : "string",
            "description" : "Belgian companies only. The ID of the document in the ClearFacts system that corresponds to this document.",
            "readOnly" : true
          },
          "octopus_document_id" : {
            "type" : "string",
            "description" : "Status if the document is sent to Octopus. No ID feedback is received from Octopus.",
            "readOnly" : true
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "modified" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "deleted" : {
            "type" : "boolean"
          },
          "locked" : {
            "type" : "boolean",
            "description" : "Some accounts have a locking system active. When a document is sent to an accounting system, the document gets locked so it can't be modified or deleted."
          },
          "invoice_lines" : {
            "$ref" : "#/components/schemas/InvoiceLines"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_incl"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_cost_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_profit_amount"
          },
          "total_empty_goods_value" : {
            "$ref" : "#/components/schemas/Proposal_total_empty_goods_value"
          }
        }
      },
      "InvoicesList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          }
        }
      },
      "BulkInvoices" : {
        "type" : "object",
        "properties" : {
          "webhook" : {
            "type" : "string",
            "description" : "The URL of the webhook to call",
            "default" : "ZZ"
          },
          "resources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          }
        }
      },
      "CreditnoteLine" : {
        "required" : [ "name", "price", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the line.",
            "readOnly" : true
          },
          "unit_code_id" : {
            "type" : "string",
            "description" : "the ID of the unit code (UNECERec21)",
            "default" : "ZZ"
          },
          "type" : {
            "type" : "string",
            "description" : "line behavior",
            "default" : "line",
            "enum" : [ "line", "cost", "section" ]
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quanity of the product or services"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the product or service. First line on the document"
          },
          "text" : {
            "type" : "string",
            "description" : "Optional extra text under the name. Can be formatted in HTML."
          },
          "price" : {
            "type" : "number",
            "description" : "price in the document currency"
          },
          "purchase_price" : {
            "type" : "number",
            "description" : "purchase price of the line in the document currency (cost). Line price - Line purchase price = Line profit"
          },
          "empty_goods_value" : {
            "type" : "number",
            "description" : "The total price of empty goods in the document currency. The empty goods value is added to the price."
          },
          "vat" : {
            "type" : "number",
            "description" : "The vat percentage. If the document vattype is excl, the vat will be added to the price. If the document vattype is incl, the price already has the vat included and nothing will be added."
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount on this line. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "product_id" : {
            "type" : "integer",
            "description" : "Optional product ID. When a line is linked to a specific product, a product history and statistics become available for that product. Lines don't need to be linked to products in the system."
          },
          "g_l_account_code" : {
            "type" : "integer",
            "description" : "The GLAccount code (for example 700000) on which accounting number the sale has to be booked. This can be used when exporting the invoice to accounting software."
          },
          "unit_code" : {
            "$ref" : "#/components/schemas/UnitCode"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "base_price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_excl"
          },
          "base_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_tax_amount"
          },
          "base_price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_incl"
          },
          "discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_excl"
          },
          "tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_discount"
          },
          "discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_incl"
          },
          "price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_excl"
          },
          "tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_amount"
          },
          "price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_incl"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_incl"
          },
          "cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_cost_amount"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_cost_amount"
          },
          "profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_profit_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_profit_amount"
          }
        }
      },
      "CreditnoteLines" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/CreditnoteLine"
        }
      },
      "Creditnote" : {
        "required" : [ "customer_name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the product.",
            "readOnly" : true
          },
          "journal_id" : {
            "type" : "integer",
            "description" : "The id of the sales journal. \\'null\\' for default journal"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "currency id for the document currency",
            "default" : "company currency"
          },
          "number" : {
            "type" : "integer",
            "description" : "raw number (without format) for the document"
          },
          "number_formatted" : {
            "type" : "string",
            "description" : "formatted number",
            "readOnly" : true
          },
          "date" : {
            "type" : "string",
            "description" : "document date",
            "format" : "date"
          },
          "status" : {
            "type" : "string",
            "description" : "The document status. Can't be modified here, use the DocumentEvent endpoint to create and delete events that update the status",
            "readOnly" : true
          },
          "template_id" : {
            "type" : "integer",
            "description" : "The id of the template that needs to be used to create the PDF file"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "The id of the customer to which the document belongs. No customer data is copied from the contact to the document, this needs to be set manually. If the contact info changes, old documents don\\'t get updated."
          },
          "customer_name" : {
            "type" : "string",
            "description" : "The \\'contact_id\\' field is only used to link the document to the contact, but the customer data needs to be set per document, so if the contact info changes, old documents don\\'t get updated."
          },
          "customer_attn" : {
            "type" : "string",
            "description" : "The attn line of the document"
          },
          "customer_street" : {
            "type" : "string",
            "description" : "The street name of the customer"
          },
          "customer_streetnumber" : {
            "type" : "string",
            "description" : "The street number and PO box for the customer"
          },
          "customer_citycode" : {
            "type" : "string",
            "description" : "The postal code or zip code for the customer"
          },
          "customer_city" : {
            "type" : "string",
            "description" : "The city of the customer"
          },
          "customer_vat" : {
            "type" : "string",
            "description" : "The VAT number of the customer"
          },
          "customer_email" : {
            "type" : "string",
            "description" : "A specific customer email for this document. If this is set, when sending the document over email, this email address is proposed instead of the email address of the linked contact."
          },
          "country_id" : {
            "type" : "string",
            "description" : "The country id for the customer"
          },
          "language_id" : {
            "type" : "string",
            "description" : "The language id for the customer. This determines the languange in which the PDF file is generated."
          },
          "signature_customer" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by the customer"
          },
          "signature_company" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by company owner (the onFact user)."
          },
          "signature" : {
            "type" : "string",
            "description" : "base64 encoded image with the signature"
          },
          "vattype" : {
            "type" : "string",
            "description" : "If line prices are entered excluding taxes or including taxes. The method of calculation and rounding is different for each method. If you want a specific endtotal of the invoice including taxes, best to enter prices incl.",
            "enum" : [ "excl", "incl" ]
          },
          "vat_exception" : {
            "type" : "string",
            "description" : "Belgian VAT declaration box. Boxes 01 and 02 don't need to be set here, just use 03 and the system wil automatically change the 03 to 01 for lines with 6% vat and 02 for lines with 12% vat. Used for specific mandatory pieces of text on the invoice and when invoices are pushed to accounting systems.",
            "enum" : [ "00", "03", "44", "45", "46", "47" ]
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "exchange_rate" : {
            "type" : "number",
            "description" : "The exchange rate used to convert the document currency to the company currency"
          },
          "section_behavior" : {
            "type" : "string",
            "description" : "How sections should behave. Are they just a grouping section in which each line has it's own price, or has the total section a specific price and line prices are ignored.",
            "enum" : [ "sum", "price" ]
          },
          "text" : {
            "type" : "string",
            "description" : "The text field under the lines table. Can be formatted with HTML.",
            "format" : "html"
          },
          "toptext" : {
            "type" : "string",
            "description" : "The text field above the lines table. Can be formatted with HTML. Is a configuration that needs to be activated to be visible in the online application.",
            "format" : "html"
          },
          "nota" : {
            "type" : "string",
            "description" : "A free textfield to enter internal information about the product"
          },
          "uuid" : {
            "type" : "string",
            "description" : "unique code for this invoice. This can be used to let the customer view the invoice without a login.",
            "readOnly" : true
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "modified" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "deleted" : {
            "type" : "boolean"
          },
          "creditnote_lines" : {
            "$ref" : "#/components/schemas/CreditnoteLines"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_incl"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_cost_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_profit_amount"
          },
          "total_empty_goods_value" : {
            "$ref" : "#/components/schemas/Proposal_total_empty_goods_value"
          }
        }
      },
      "CreditnotesList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Creditnote"
            }
          }
        }
      },
      "PurchaseslipLine" : {
        "required" : [ "name", "price", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the line.",
            "readOnly" : true
          },
          "unit_code_id" : {
            "type" : "string",
            "description" : "the ID of the unit code (UNECERec21)",
            "default" : "ZZ"
          },
          "type" : {
            "type" : "string",
            "description" : "line behavior",
            "default" : "line",
            "enum" : [ "line", "cost", "section" ]
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quanity of the product or services"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the product or service. First line on the document"
          },
          "text" : {
            "type" : "string",
            "description" : "Optional extra text under the name. Can be formatted in HTML."
          },
          "price" : {
            "type" : "number",
            "description" : "price in the document currency"
          },
          "purchase_price" : {
            "type" : "number",
            "description" : "purchase price of the line in the document currency (cost). Line price - Line purchase price = Line profit"
          },
          "empty_goods_value" : {
            "type" : "number",
            "description" : "The total price of empty goods in the document currency. The empty goods value is added to the price."
          },
          "vat" : {
            "type" : "number",
            "description" : "The vat percentage. If the document vattype is excl, the vat will be added to the price. If the document vattype is incl, the price already has the vat included and nothing will be added."
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount on this line. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "product_id" : {
            "type" : "integer",
            "description" : "Optional product ID. When a line is linked to a specific product, a product history and statistics become available for that product. Lines don't need to be linked to products in the system."
          },
          "g_l_account_code" : {
            "type" : "integer",
            "description" : "The GLAccount code (for example 700000) on which accounting number the sale has to be booked. This can be used when exporting the invoice to accounting software."
          },
          "unit_code" : {
            "$ref" : "#/components/schemas/UnitCode"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "base_price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_excl"
          },
          "base_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_tax_amount"
          },
          "base_price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_price_incl"
          },
          "discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_excl"
          },
          "tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_discount"
          },
          "discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_discount_incl"
          },
          "price_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_excl"
          },
          "tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_tax_amount"
          },
          "price_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_price_incl"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/ProposalLine_total_amount_incl"
          },
          "cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_cost_amount"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_cost_amount"
          },
          "profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_profit_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/ProposalLine_total_profit_amount"
          }
        }
      },
      "PurchaseslipLines" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PurchaseslipLine"
        }
      },
      "Purchaseslip" : {
        "required" : [ "customer_name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the product.",
            "readOnly" : true
          },
          "journal_id" : {
            "type" : "integer",
            "description" : "The id of the sales journal. \\'null\\' for default journal"
          },
          "currency_id" : {
            "type" : "string",
            "description" : "currency id for the document currency",
            "default" : "company currency"
          },
          "number" : {
            "type" : "integer",
            "description" : "raw number (without format) for the document"
          },
          "number_formatted" : {
            "type" : "string",
            "description" : "formatted number",
            "readOnly" : true
          },
          "date" : {
            "type" : "string",
            "description" : "document date",
            "format" : "date"
          },
          "status" : {
            "type" : "string",
            "description" : "The document status. Can't be modified here, use the DocumentEvent endpoint to create and delete events that update the status",
            "readOnly" : true
          },
          "template_id" : {
            "type" : "integer",
            "description" : "The id of the template that needs to be used to create the PDF file"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "The id of the customer to which the document belongs. No customer data is copied from the contact to the document, this needs to be set manually. If the contact info changes, old documents don\\'t get updated."
          },
          "customer_name" : {
            "type" : "string",
            "description" : "The \\'contact_id\\' field is only used to link the document to the contact, but the customer data needs to be set per document, so if the contact info changes, old documents don\\'t get updated."
          },
          "customer_attn" : {
            "type" : "string",
            "description" : "The attn line of the document"
          },
          "customer_street" : {
            "type" : "string",
            "description" : "The street name of the customer"
          },
          "customer_streetnumber" : {
            "type" : "string",
            "description" : "The street number and PO box for the customer"
          },
          "customer_citycode" : {
            "type" : "string",
            "description" : "The postal code or zip code for the customer"
          },
          "customer_city" : {
            "type" : "string",
            "description" : "The city of the customer"
          },
          "customer_vat" : {
            "type" : "string",
            "description" : "The VAT number of the customer"
          },
          "customer_email" : {
            "type" : "string",
            "description" : "A specific customer email for this document. If this is set, when sending the document over email, this email address is proposed instead of the email address of the linked contact."
          },
          "country_id" : {
            "type" : "string",
            "description" : "The country id for the customer"
          },
          "language_id" : {
            "type" : "string",
            "description" : "The language id for the customer. This determines the languange in which the PDF file is generated."
          },
          "signature_customer" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by the customer"
          },
          "signature_company" : {
            "type" : "boolean",
            "description" : "If the document needs to be signed by company owner (the onFact user)."
          },
          "signature" : {
            "type" : "string",
            "description" : "base64 encoded image with the signature"
          },
          "vattype" : {
            "type" : "string",
            "description" : "If line prices are entered excluding taxes or including taxes. The method of calculation and rounding is different for each method. If you want a specific endtotal of the invoice including taxes, best to enter prices incl.",
            "enum" : [ "excl", "incl" ]
          },
          "vat_exception" : {
            "type" : "string",
            "description" : "Belgian VAT declaration box. Boxes 01 and 02 don't need to be set here, just use 03 and the system wil automatically change the 03 to 01 for lines with 6% vat and 02 for lines with 12% vat. Used for specific mandatory pieces of text on the invoice and when invoices are pushed to accounting systems.",
            "enum" : [ "00", "03", "44", "45", "46", "47" ]
          },
          "discount" : {
            "type" : "number",
            "description" : "The amount of discount. Can be a percentage between 0 and 100 or a specific amount in the specified currency. Which one is determined by the parameter discount_type"
          },
          "discount_type" : {
            "type" : "string",
            "description" : "determines if the parameter discount is a percentage or a specific amount.",
            "enum" : [ "amount", "percent" ]
          },
          "exchange_rate" : {
            "type" : "number",
            "description" : "The exchange rate used to convert the document currency to the company currency"
          },
          "section_behavior" : {
            "type" : "string",
            "description" : "How sections should behave. Are they just a grouping section in which each line has it's own price, or has the total section a specific price and line prices are ignored.",
            "enum" : [ "sum", "price" ]
          },
          "text" : {
            "type" : "string",
            "description" : "The text field under the lines table. Can be formatted with HTML.",
            "format" : "html"
          },
          "toptext" : {
            "type" : "string",
            "description" : "The text field above the lines table. Can be formatted with HTML. Is a configuration that needs to be activated to be visible in the online application.",
            "format" : "html"
          },
          "nota" : {
            "type" : "string",
            "description" : "A free textfield to enter internal information about the product"
          },
          "uuid" : {
            "type" : "string",
            "description" : "unique code for this invoice. This can be used to let the customer view the invoice without a login.",
            "readOnly" : true
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "modified" : {
            "type" : "string",
            "format" : "date",
            "readOnly" : true
          },
          "deleted" : {
            "type" : "boolean"
          },
          "purchaseslip_lines" : {
            "$ref" : "#/components/schemas/PurchaseslipLines"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          },
          "base_total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_excl"
          },
          "base_total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_base_total_tax_amount"
          },
          "base_total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_base_total_amount_incl"
          },
          "total_discount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_excl"
          },
          "total_tax_discount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_discount"
          },
          "total_discount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_discount_incl"
          },
          "total_amount_excl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_excl"
          },
          "total_tax_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_tax_amount"
          },
          "total_amount_incl" : {
            "$ref" : "#/components/schemas/Proposal_total_amount_incl"
          },
          "total_cost_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_cost_amount"
          },
          "total_profit_amount" : {
            "$ref" : "#/components/schemas/Proposal_total_profit_amount"
          },
          "total_empty_goods_value" : {
            "$ref" : "#/components/schemas/Proposal_total_empty_goods_value"
          }
        }
      },
      "PurchaseslipsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Purchaseslip"
            }
          }
        }
      },
      "Email" : {
        "required" : [ "subject", "text", "to" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the email.",
            "readOnly" : true
          },
          "to" : {
            "type" : "string",
            "description" : "The \"to\" field of an email. Can be multiple values separated with a comma",
            "readOnly" : true
          },
          "cc" : {
            "type" : "string",
            "description" : "The \"cc\" field of an email. Can be multiple values separated with a comma"
          },
          "bcc" : {
            "type" : "string",
            "description" : "The \"bcc\" field of an email. Can be multiple values separated with a comma"
          },
          "subject" : {
            "type" : "string",
            "description" : "The subject of the email"
          },
          "text" : {
            "type" : "string",
            "description" : "The email body. Can be html."
          },
          "pdf_as_attachment" : {
            "type" : "boolean",
            "description" : "Set true to put the PDF of the document in the attachment. Recommended!"
          },
          "xml_as_attachment" : {
            "type" : "boolean",
            "description" : "Set true to put the XML of the document in the attachment. The XML will be in the local UBL fomat."
          }
        }
      },
      "Letter" : {
        "type" : "object",
        "properties" : {
          "prior" : {
            "type" : "boolean",
            "description" : "The id of the email."
          },
          "double_sided" : {
            "type" : "boolean",
            "description" : "The \"to\" field of an email. Can be multiple values separated with a comma"
          }
        }
      },
      "ContactField" : {
        "required" : [ "name", "options", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the field.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "a chosen label for the field"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "text", "textarea", "select", "boolean" ]
          },
          "options" : {
            "type" : "string",
            "description" : "comma seperated list of values for when using the select type."
          },
          "parameter" : {
            "type" : "string",
            "description" : "the parameter in the Contact object that contains the value for this vield",
            "readOnly" : true
          }
        }
      },
      "ContactFieldsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactField"
            }
          }
        }
      },
      "Lawrule" : {
        "required" : [ "description", "language_id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the description.",
            "readOnly" : true
          },
          "language_id" : {
            "type" : "string",
            "description" : "the id of the language in which the description is written."
          },
          "lawrule" : {
            "type" : "string",
            "description" : "the actual lawrule (piece of text)"
          },
          "rank" : {
            "type" : "integer",
            "description" : "descriptions should be ranked on freaquency of use. The first description is inserted automatically in the UI for a new document. Other can be inserted with buttons."
          }
        }
      },
      "LawrulesList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Lawrule"
            }
          }
        }
      },
      "ImportConfiguration" : {
        "required" : [ "delimiter", "enclosing", "fields", "name", "resource", "skip_first_row" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the configuration.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "a chosen name for the configuration. When importing products and no productgroup is set, this name is used."
          },
          "resource" : {
            "type" : "string",
            "description" : "which content does the import file contains",
            "enum" : [ "customers", "suppliers", "products" ]
          },
          "delimiter" : {
            "type" : "string",
            "description" : "the seperator between values in the CSV file. Mostly \",\" or \";\"."
          },
          "enclosing" : {
            "type" : "string",
            "description" : "The enclosing of values in a field. Mostly a parenthesis \""
          },
          "skip_first_row" : {
            "type" : "boolean",
            "description" : "Skip importing the first row when the first row contains a header"
          },
          "fields" : {
            "$ref" : "#/components/schemas/ImportConfiguration_fields"
          }
        }
      },
      "ExportRequest" : {
        "required" : [ "model", "resource_list", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the import request.",
            "readOnly" : true
          },
          "model" : {
            "type" : "string",
            "description" : "The data you want to export"
          },
          "type" : {
            "type" : "string",
            "description" : "The format in which you want to export"
          },
          "resource_list" : {
            "type" : "number",
            "description" : "A comma separated list with the id's of the resources you want to be included in the export file. Leave empty to export all."
          },
          "number_of_resources" : {
            "type" : "boolean",
            "description" : "The number of resources listed in the resource list.",
            "readOnly" : true
          },
          "current_pointer" : {
            "type" : "boolean",
            "description" : "How many documents have already been added to the export document.",
            "readOnly" : true
          },
          "ready" : {
            "type" : "boolean",
            "description" : "If the system has finished preparing the attachment document",
            "readOnly" : true
          },
          "attachment" : {
            "$ref" : "#/components/schemas/Attachment"
          }
        }
      },
      "ExportRequestsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExportRequest"
            }
          }
        }
      },
      "ImportConfigurationsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportConfiguration"
            }
          }
        }
      },
      "ImportRequest" : {
        "required" : [ "file", "import_configuration_id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the import request.",
            "readOnly" : true
          },
          "import_configuration_id" : {
            "type" : "integer",
            "description" : "The id of the configuration.",
            "readOnly" : true
          },
          "file" : {
            "type" : "string",
            "description" : "Base64 encoding of the content of a CSV file"
          },
          "offset" : {
            "type" : "number",
            "description" : "The current number of already processed rows",
            "readOnly" : true
          },
          "rows" : {
            "type" : "number",
            "description" : "The total number of rows to import",
            "readOnly" : true
          }
        }
      },
      "ImportRequestsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportRequest"
            }
          }
        }
      },
      "Template" : {
        "required" : [ "creator_id", "name", "original_template_id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the template",
            "readOnly" : true
          },
          "original_template_id" : {
            "type" : "integer",
            "description" : "If this field is set, this is an instance template. An instance template does not have code itself but uses the code of the original template. Only instance templates can be used in documents!",
            "readOnly" : true
          },
          "creator_id" : {
            "type" : "integer",
            "description" : "Templates with a creator_id set, are templates with code created by the user himself. These templates need to be instantiated using the original template setting in another template to use in documents"
          },
          "margin_top" : {
            "type" : "integer",
            "description" : "The margin in mm to the top of the page",
            "default" : 12
          },
          "margin_left" : {
            "type" : "integer",
            "description" : "The margin in mm to the left of the page",
            "default" : 12
          },
          "margin_bottom" : {
            "type" : "integer",
            "description" : "The margin in mm to the bottom of the page",
            "default" : 12
          },
          "margin_right" : {
            "type" : "integer",
            "description" : "The margin in mm to the right of the page",
            "default" : 12
          },
          "layout" : {
            "type" : "string",
            "description" : "The HTML code that wraps around the specific documents. Use the {{$content}} variable which will be replaced by the specific document HTML."
          },
          "css" : {
            "type" : "string",
            "description" : "The CSS style for the template"
          },
          "proposal" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "orderslip" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "deliveryslip" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "posticket" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "paymentrequest" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "paymentrequestreminder" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "invoice" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "invoicereminder" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "creditnote" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "purchaseslip" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "purchaseorder" : {
            "type" : "string",
            "description" : "The HTML code specific for this document"
          },
          "overwrite_company_data" : {
            "type" : "boolean",
            "description" : "Overwrite the company information with specific information in this template?"
          },
          "company_name" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new company name or title"
          },
          "street" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new street"
          },
          "street_number" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new street_number"
          },
          "city" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new city"
          },
          "citycode" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new citycode"
          },
          "vat" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new vat"
          },
          "phone" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new phone"
          },
          "fax" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new fax"
          },
          "gsm" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new gsm"
          },
          "email" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new email"
          },
          "website" : {
            "type" : "string",
            "description" : "If overwrite_company_data , the new website"
          }
        }
      },
      "TemplatesList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Template"
            }
          }
        }
      },
      "Description" : {
        "required" : [ "description", "language_id", "model", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the description.",
            "readOnly" : true
          },
          "language_id" : {
            "type" : "string",
            "description" : "the id of the language in which the description is written."
          },
          "model" : {
            "type" : "string",
            "description" : "the specific model for which this description is used.",
            "enum" : [ "Proposal", "Orderslip", "Deliveryslip", "Posticket", "Paymentrequest", "Invoice", "Creditnote", "Purchaseslip", "Purchaseorder" ]
          },
          "name" : {
            "type" : "string",
            "description" : "a chosen name for the description so the user can easily select a description"
          },
          "description" : {
            "type" : "string",
            "description" : "the actual description"
          },
          "rank" : {
            "type" : "integer",
            "description" : "descriptions should be ranked on freaquency of use. The first description is inserted automatically in the UI for a new document. Other can be inserted with buttons."
          }
        }
      },
      "DescriptionsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Description"
            }
          }
        }
      },
      "Toptextdescription" : {
        "required" : [ "description", "language_id", "model", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the description.",
            "readOnly" : true
          },
          "language_id" : {
            "type" : "string",
            "description" : "the id of the language in which the description is written."
          },
          "model" : {
            "type" : "string",
            "description" : "the specific model for which this description is used.",
            "enum" : [ "Proposal", "Orderslip", "Deliveryslip", "Posticket", "Paymentrequest", "Invoice", "Creditnote", "Purchaseslip", "Purchaseorder" ]
          },
          "name" : {
            "type" : "string",
            "description" : "a chosen name for the description so the user can easily select a description"
          },
          "description" : {
            "type" : "string",
            "description" : "the actual description"
          },
          "rank" : {
            "type" : "integer",
            "description" : "descriptions should be ranked on freaquency of use. The first description is inserted automatically in the UI for a new document. Other can be inserted with buttons."
          }
        }
      },
      "ToptextdescriptionsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Toptextdescription"
            }
          }
        }
      },
      "Emaildescription" : {
        "required" : [ "description", "language_id", "model", "name", "subject" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the description.",
            "readOnly" : true
          },
          "language_id" : {
            "type" : "string",
            "description" : "the id of the language in which the description is written."
          },
          "model" : {
            "type" : "string",
            "description" : "the specific model for which this description is used.",
            "enum" : [ "Proposal", "Orderslip", "Deliveryslip", "Posticket", "Paymentrequest", "Invoice", "Creditnote", "Purchaseslip", "Purchaseorder" ]
          },
          "name" : {
            "type" : "string",
            "description" : "a chosen name for the description so the user can easily select a description"
          },
          "subject" : {
            "type" : "string",
            "description" : "the standard email subject"
          },
          "emaildescription" : {
            "type" : "string",
            "description" : "the actual description"
          },
          "rank" : {
            "type" : "integer",
            "description" : "descriptions should be ranked on frequency of use. The first description is inserted automatically in the UI for a new document. Other can be inserted with buttons."
          }
        }
      },
      "EmaildescriptionsList" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "total number of items"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Emaildescription"
            }
          }
        }
      },
      "Vat" : {
        "properties" : {
          "vat" : {
            "type" : "string",
            "description" : "the vat number to check"
          }
        }
      },
      "VatContact" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "vat" : {
            "type" : "string"
          },
          "street" : {
            "type" : "string"
          },
          "streetnumber" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "citycode" : {
            "type" : "string"
          },
          "country_id" : {
            "type" : "string"
          }
        }
      },
      "Error_field" : {
        "properties" : {
          "_error_code" : {
            "type" : "string"
          }
        }
      },
      "Error_errors" : {
        "properties" : {
          "field" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Error_field"
            }
          }
        }
      },
      "Country_name" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "description" : "The default country name in the user language"
          },
          "eng" : {
            "type" : "string",
            "description" : "The country name in English. Other langauge ids also available."
          }
        }
      },
      "Language_name" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "description" : "The default language name in the user language"
          },
          "eng" : {
            "type" : "string",
            "description" : "The language name in English. Other langauge ids also available."
          }
        }
      },
      "Currency_name" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "description" : "The default currency name in the user language"
          },
          "eng" : {
            "type" : "string",
            "description" : "The currency name in English. Other langauge ids also available."
          }
        }
      },
      "Payment_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "The amount in the transaction currency",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "The amount in currency with specific id. Both the transaction and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Product_name" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "description" : "default name for the product"
          },
          "eng" : {
            "type" : "string",
            "description" : "english name for the product. Each langauge_id can be used"
          }
        },
        "description" : "an array with the key \\'_\\' as default name, and each language id the name for that specific language."
      },
      "Product_text" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "description" : "default description for the product"
          },
          "eng" : {
            "type" : "string",
            "description" : "english description for the product. Each langauge_id can be used"
          }
        },
        "description" : "an array with the key \\'_\\' as default description, and each language id the name for that specific language."
      },
      "Product_price" : {
        "type" : "object",
        "properties" : {
          "48" : {
            "type" : "number",
            "description" : "price for the contact tier with id \\'48\\'. Each contact tier id can be used."
          },
          "_" : {
            "type" : "number",
            "description" : "default price for the product. price is either tax exclusive or tax inclusive, depending on the \\\"vattype\\\" setting."
          }
        }
      },
      "Product_price_excl" : {
        "type" : "object",
        "properties" : {
          "48" : {
            "type" : "number",
            "description" : "Read only: calculated price for the product excl taxes for the contact tier with id '48'. Each contact tier id can be used."
          },
          "_" : {
            "type" : "number",
            "description" : "Read only: default calculated price for the product excl taxes"
          }
        }
      },
      "Product_tax_amount" : {
        "type" : "object",
        "properties" : {
          "48" : {
            "type" : "number",
            "description" : "Read only: calculated tax amount for the product the contact tier with id '48'. Each contact tier id can be used."
          },
          "_" : {
            "type" : "number",
            "description" : "Read only: default calculated tax amount for the product "
          }
        }
      },
      "Product_price_incl" : {
        "type" : "object",
        "properties" : {
          "48" : {
            "type" : "number",
            "description" : "Read only: calculated price for the product incl taxes for the contact tier with id '48'. Each contact tier id can be used."
          },
          "_" : {
            "type" : "number",
            "description" : "Read only: default calculated price for the product incl taxes"
          }
        }
      },
      "Product_product_lines" : {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "description" : "Quantity of child products"
          },
          "child_product_id" : {
            "type" : "string",
            "description" : "ID of the child product"
          }
        }
      },
      "ProposalLine_base_price_excl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated price excl. vat and line discount in the document currency for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated price excl. vat and line discount in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_base_tax_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated tax amount without line discount in the document currency for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated tax amount without line discount in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_base_price_incl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated price incl. vat and without line discount in the document currency for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated price incl. vat and without line discount in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_discount_excl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated discount excl. vat. for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated discount excl. vat in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_tax_discount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated tax discount for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated tax discount in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_discount_incl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated discount incl. vat. for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated discount incl. vat in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_price_excl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated price excl. vat with line discount in the document currency for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated price excl. vat with line discount in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_tax_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated tax amount with line discount in the document currency for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated tax amount with line discount in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_price_incl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated price incl. vat and with line discount in the document currency for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated price incl. vat and with line discount in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_base_total_amount_excl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated price excl. vat and line discount in the document currency for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated price excl. vat and line discount in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_base_total_tax_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated tax amount without line discount in the document currency for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated tax amount without line discount in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_base_total_amount_incl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated price incl. vat and without line discount in the document currency for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated price incl. vat and without line discount in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_total_discount_excl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated discount excl. vat. for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated discount excl. vat in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_total_tax_discount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated tax discount for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated tax discount in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_total_discount_incl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated discount incl. vat. for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated discount incl. vat in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_total_amount_excl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated price excl. vat with line discount in the document currency for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated price excl. vat with line discount in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_total_tax_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated tax amount with line discount in the document currency for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated tax amount with line discount in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_total_amount_incl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated price incl. vat and with line discount in the document currency for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated price incl. vat and with line discount in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_cost_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated cost in document currency for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated cost in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_total_cost_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated cost in document currency for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated cost in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_profit_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated profit in document currency for 1 quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated profit in EURO for 1 quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ProposalLine_total_profit_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated profit in document currency for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated profit in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_base_total_amount_excl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated amount excl. vat and document discount in the document currency",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated amount excl. vat and document discount in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_base_total_tax_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated tax amount without document discount in the document currency",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated tax amount without document discount in EURO. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_base_total_amount_incl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated amount incl. taxes and without document discount in the document currency",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated amount incl. vat and without document discount in EURO. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_total_discount_excl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated document discount excl. vat.",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated document discount excl. vat in EURO. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_total_tax_discount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated tax discount",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated tax discount in EURO. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_total_discount_incl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated discount incl. vat.",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated discount incl. vat in EURO. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_total_amount_excl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated amount excl. vat with line discount in the document currency.",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated amount excl. vat with line discount in EURO. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_total_tax_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated tax amount with document discount in the document currency",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated tax amount with document discount in EURO. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_total_amount_incl" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated amount incl. vat and with document discount in the document currency for all quantity",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated amount incl. vat and with document discount in EURO for all quantity. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_total_cost_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated cost in document currency",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated cost in EURO. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_total_profit_amount" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated profit in document currency",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated profit in EURO . Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "Proposal_total_empty_goods_value" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "number",
            "description" : "Calculated total empty goods value in document currency.",
            "readOnly" : true
          },
          "EUR" : {
            "type" : "number",
            "description" : "Calculated total empty goods value in EURO. Both the document currency and the company curency are available as keys.",
            "readOnly" : true
          }
        }
      },
      "ImportConfiguration_fields" : {
        "type" : "object",
        "properties" : {
          "field_name" : {
            "type" : "number",
            "description" : "Use a field name, such as \"city\" as parameter in the fields Array. The value is the column number in the CSV file which contains this field. In other terms, the fields array contains am apping from CSV collumn to onFact field."
          }
        }
      }
    },
    "responses" : {
      "CreatedResponse" : {
        "description" : "Resource Created",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Success"
            }
          }
        }
      },
      "UpdatedResponse" : {
        "description" : "Resource Updated",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Success"
            }
          }
        }
      },
      "DeletedResponse" : {
        "description" : "Resource Deleted",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Success"
            }
          }
        }
      },
      "ValidationErrorResponse" : {
        "description" : "ValidationError: Resource could not be saved because of validation errors",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "UnsupportedGrantTypeErrorResponse" : {
        "description" : "UnsupportedGrantType: authentication can only be done with specific grant types",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidLoginErrorResponse" : {
        "description" : "InvalidLogin: login credentials not correct",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidTwoFactorAuthenticationCodeErrorResponse" : {
        "description" : "InvalidTwoFactorAuthenticationCode: 2FA code not correct",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyAttemptsErrorResponse" : {
        "description" : "TooManyAttemptsErrorResponse: only 3 failed login attempts per minute are allowed",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "UnauthorizedErrorResponse" : {
        "description" : "Unauthorized: Authentication is needed for this action",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "ForbiddenErrorResponse" : {
        "description" : "Forbidden: User is authenticated but does not have enough rights to perform this action",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFoundErrorResponse" : {
        "description" : "NotFound: The specified resourse wat not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequestsErrorResponse" : {
        "description" : "TooManyRequests: The API throttling limit has been reached",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "parameters" : {
      "id" : {
        "name" : "id",
        "in" : "path",
        "description" : "The resource ID",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "integer"
        }
      },
      "X-COMPANY-UUID" : {
        "name" : "X-COMPANY-UUID",
        "in" : "header",
        "description" : "The UUID of the company for which this endpoint is used",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        }
      },
      "offset" : {
        "name" : "offset",
        "in" : "query",
        "description" : "The number of items to skip before starting to collect the result set",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "integer"
        }
      },
      "limit" : {
        "name" : "limit",
        "in" : "query",
        "description" : "The numbers of items to return",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 100,
          "type" : "integer",
          "default" : 100
        }
      },
      "q" : {
        "name" : "q",
        "in" : "query",
        "description" : "A logic expression to filter the list against. For example: 'isCustomer && name:BVBA*'",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "order_by" : {
        "name" : "order_by",
        "in" : "query",
        "description" : "The field on which to order, a semiculmn and the order in which to order. For example: 'name:ascend' or 'city:descend'",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "password" : {
        "type" : "oauth2",
        "flows" : {
          "password" : {
            "tokenUrl" : "https://onfact5-api-kvgysegh.c9users.io/v1/oauth2/token",
            "scopes" : {
              "all" : "full access. Access control is done by in app configuration"
            }
          }
        }
      }
    }
  }
}